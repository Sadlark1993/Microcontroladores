CCS PCM C Compiler, Version 5.015, 5967               29-set-22 19:18

               Filename:   C:\Users\Sadla\OneDrive\Documentos\MEGAsync\doc\Facul\Microcontroladores\Projetos\09Teclado\teclado.lst

               ROM used:   809 words (10%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           20 (5%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2D3
0003:  NOP
....................  
.................... //****LCD E TECLADO**** 
.................... //#include <teclado.h> 
....................  
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0F
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8C,24
000D:  DATA C6,26
000E:  DATA 54,10
000F:  DATA 32,18
0010:  DATA 32,19
0011:  DATA 00,00
0012:  DATA 0C,10
0013:  DATA 20,10
0014:  DATA 20,10
0015:  DATA D4,22
0016:  DATA 43,26
0017:  DATA 41,22
0018:  DATA 4F,10
0019:  DATA 20,10
001A:  DATA 20,10
001B:  DATA 00,01
001C:  DATA 0C,21
001D:  DATA 75,3A
001E:  DATA F4,37
001F:  DATA 6E,10
0020:  DATA A5,31
0021:  DATA 00,00
0022:  DATA 0C,10
0023:  DATA 20,10
0024:  DATA 20,10
0025:  DATA D4,22
0026:  DATA 43,26
0027:  DATA 41,22
0028:  DATA 4F,10
0029:  DATA 4C,10
002A:  DATA 20,10
002B:  DATA 20,00
*
00FC:  MOVF   0B,W
00FD:  MOVWF  22
00FE:  BCF    0B.7
00FF:  BSF    03.5
0100:  BSF    03.6
0101:  BSF    0C.7
0102:  BSF    0C.0
0103:  NOP
0104:  NOP
0105:  BCF    03.5
0106:  BCF    03.6
0107:  BTFSC  22.7
0108:  BSF    0B.7
0109:  BSF    03.6
010A:  MOVF   0C,W
010B:  ANDLW  7F
010C:  BTFSC  03.2
010D:  GOTO   150
010E:  BCF    03.6
010F:  MOVWF  22
0110:  BSF    03.6
0111:  MOVF   0D,W
0112:  BCF    03.6
0113:  MOVWF  23
0114:  BSF    03.6
0115:  MOVF   0F,W
0116:  BCF    03.6
0117:  MOVWF  24
0118:  MOVF   22,W
0119:  MOVWF  26
011A:  CALL   0C5
011B:  MOVF   23,W
011C:  BSF    03.6
011D:  MOVWF  0D
011E:  BCF    03.6
011F:  MOVF   24,W
0120:  BSF    03.6
0121:  MOVWF  0F
0122:  BCF    03.6
0123:  MOVF   0B,W
0124:  MOVWF  25
0125:  BCF    0B.7
0126:  BSF    03.5
0127:  BSF    03.6
0128:  BSF    0C.7
0129:  BSF    0C.0
012A:  NOP
012B:  NOP
012C:  BCF    03.5
012D:  BCF    03.6
012E:  BTFSC  25.7
012F:  BSF    0B.7
0130:  BSF    03.6
0131:  RLF    0C,W
0132:  RLF    0E,W
0133:  ANDLW  7F
0134:  BTFSC  03.2
0135:  GOTO   150
0136:  BCF    03.6
0137:  MOVWF  22
0138:  BSF    03.6
0139:  MOVF   0D,W
013A:  BCF    03.6
013B:  MOVWF  23
013C:  BSF    03.6
013D:  MOVF   0F,W
013E:  BCF    03.6
013F:  MOVWF  24
0140:  MOVF   22,W
0141:  MOVWF  26
0142:  CALL   0C5
0143:  MOVF   23,W
0144:  BSF    03.6
0145:  MOVWF  0D
0146:  BCF    03.6
0147:  MOVF   24,W
0148:  BSF    03.6
0149:  MOVWF  0F
014A:  INCF   0D,F
014B:  BTFSC  03.2
014C:  INCF   0F,F
014D:  BCF    03.6
014E:  GOTO   0FC
014F:  BSF    03.6
0150:  BCF    03.6
0151:  RETURN
*
027A:  MOVF   0B,W
027B:  MOVWF  23
027C:  BCF    0B.7
027D:  BSF    03.5
027E:  BSF    03.6
027F:  BSF    0C.7
0280:  BSF    0C.0
0281:  NOP
0282:  NOP
0283:  BCF    03.5
0284:  BCF    03.6
0285:  BTFSC  23.7
0286:  BSF    0B.7
0287:  BTFSC  03.0
0288:  GOTO   2B1
0289:  BSF    03.6
028A:  MOVF   0C,W
028B:  ANDLW  7F
028C:  BCF    03.6
028D:  MOVWF  23
028E:  BSF    03.6
028F:  MOVF   0D,W
0290:  BCF    03.6
0291:  MOVWF  24
0292:  BSF    03.6
0293:  MOVF   0F,W
0294:  BCF    03.6
0295:  MOVWF  25
0296:  MOVF   23,W
0297:  MOVWF  26
0298:  CALL   0C5
0299:  MOVF   24,W
029A:  BSF    03.6
029B:  MOVWF  0D
029C:  BCF    03.6
029D:  MOVF   25,W
029E:  BSF    03.6
029F:  MOVWF  0F
02A0:  BCF    03.6
02A1:  MOVF   0B,W
02A2:  MOVWF  26
02A3:  BCF    0B.7
02A4:  BSF    03.5
02A5:  BSF    03.6
02A6:  BSF    0C.7
02A7:  BSF    0C.0
02A8:  NOP
02A9:  NOP
02AA:  BCF    03.5
02AB:  BCF    03.6
02AC:  BTFSC  26.7
02AD:  BSF    0B.7
02AE:  DECFSZ 22,F
02AF:  GOTO   2B1
02B0:  GOTO   2D0
02B1:  BSF    03.6
02B2:  RLF    0C,W
02B3:  RLF    0E,W
02B4:  ANDLW  7F
02B5:  BCF    03.6
02B6:  MOVWF  23
02B7:  BSF    03.6
02B8:  MOVF   0D,W
02B9:  BCF    03.6
02BA:  MOVWF  24
02BB:  BSF    03.6
02BC:  MOVF   0F,W
02BD:  BCF    03.6
02BE:  MOVWF  25
02BF:  MOVF   23,W
02C0:  MOVWF  26
02C1:  CALL   0C5
02C2:  MOVF   24,W
02C3:  BSF    03.6
02C4:  MOVWF  0D
02C5:  BCF    03.6
02C6:  MOVF   25,W
02C7:  BSF    03.6
02C8:  MOVWF  0F
02C9:  INCF   0D,F
02CA:  BTFSC  03.2
02CB:  INCF   0F,F
02CC:  BCF    03.0
02CD:  BCF    03.6
02CE:  DECFSZ 22,F
02CF:  GOTO   27A
02D0:  BCF    0A.3
02D1:  BCF    0A.4
02D2:  GOTO   31C (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
002C:  MOVLW  27
002D:  MOVWF  04
002E:  BCF    03.7
002F:  MOVF   00,W
0030:  BTFSC  03.2
0031:  GOTO   03F
0032:  MOVLW  06
0033:  MOVWF  78
0034:  CLRF   77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  DECFSZ 78,F
0038:  GOTO   034
0039:  MOVLW  7B
003A:  MOVWF  77
003B:  DECFSZ 77,F
003C:  GOTO   03B
003D:  DECFSZ 00,F
003E:  GOTO   032
003F:  RETURN
....................  
.................... #ifndef lcd_enable 
....................    #define lcd_enable pin_E1 // pino enable do LCD 
....................    #define lcd_rs pin_E2 // pino rs do LCD 
....................    //#define lcd_rw pin_e2 // pino rw do LCD 
....................    #define lcd_d4 pin_d4 // pino de dados d4 do LCD 
....................    #define lcd_d5 pin_d5 // pino de dados d5 do LCD 
....................    #define lcd_d6 pin_d6 // pino de dados d6 do LCD 
....................    #define lcd_d7 pin_d7 // pino de dados d7 do LCD 
.................... #endif 
....................  
....................  
.................... #include <mod_lcd.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipulação de módulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: Fábio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
....................  
.................... // As definições a seguir são utilizadas para acesso aos pinos do display 
.................... // caso o pino RW não seja utilizado, comente a definição lcd_rw 
.................... #ifndef lcd_enable 
.................... 	#define lcd_enable 		pin_e1		// pino enable do LCD 
.................... 	#define lcd_rs			pin_e0		// pino rs do LCD 
.................... 	//#define lcd_rw		pin_e2		// pino rw do LCD 
.................... 	#define lcd_d4			pin_d4		// pino de dados d4 do LCD 
.................... 	#define lcd_d5			pin_d5		// pino de dados d5 do LCD 
.................... 	#define lcd_d6			pin_d6		// pino de dados d6 do LCD 
.................... 	#define lcd_d7			pin_d7		// pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endereço da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seqüência de inicialização do módulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xf, 1, 6}; 
....................  
.................... byte lcd_le_byte() 
.................... // lê um byte do LCD (somente com pino RW) 
.................... { 
.................... 	byte dado; 
.................... 	// configura os pinos de dados como entradas 
.................... 	input(lcd_d4); 
.................... 	input(lcd_d5); 
.................... 	input(lcd_d6); 
.................... 	input(lcd_d7); 
.................... 	// se o pino rw for utilizado, coloca em 1 
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
....................    output_high(lcd_enable); // habilita display 
.................... 	dado = 0;	// zera a variável de leitura 
.................... 	// lê os quatro bits mais significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,7); 
.................... 	if (input(lcd_d6)) bit_set(dado,6); 
.................... 	if (input(lcd_d5)) bit_set(dado,5); 
.................... 	if (input(lcd_d4)) bit_set(dado,4); 
.................... 	// dá um pulso na linha enable 
.................... 	output_low(lcd_enable); 
.................... 	output_high(lcd_enable); 
.................... 	// lê os quatro bits menos significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,3); 
.................... 	if (input(lcd_d6)) bit_set(dado,2); 
.................... 	if (input(lcd_d5)) bit_set(dado,1); 
.................... 	if (input(lcd_d4)) bit_set(dado,0); 
.................... 	output_low(lcd_enable);	// desabilita o display 
.................... 	return dado;	// retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
.................... 	// coloca os quatro bits nas saidas 
.................... 	output_bit(lcd_d4,bit_test(dado,0)); 
0040:  BTFSC  2E.0
0041:  GOTO   044
0042:  BCF    08.4
0043:  GOTO   045
0044:  BSF    08.4
0045:  BSF    03.5
0046:  BCF    08.4
.................... 	output_bit(lcd_d5,bit_test(dado,1)); 
0047:  BCF    03.5
0048:  BTFSC  2E.1
0049:  GOTO   04C
004A:  BCF    08.5
004B:  GOTO   04D
004C:  BSF    08.5
004D:  BSF    03.5
004E:  BCF    08.5
.................... 	output_bit(lcd_d6,bit_test(dado,2)); 
004F:  BCF    03.5
0050:  BTFSC  2E.2
0051:  GOTO   054
0052:  BCF    08.6
0053:  GOTO   055
0054:  BSF    08.6
0055:  BSF    03.5
0056:  BCF    08.6
.................... 	output_bit(lcd_d7,bit_test(dado,3)); 
0057:  BCF    03.5
0058:  BTFSC  2E.3
0059:  GOTO   05C
005A:  BCF    08.7
005B:  GOTO   05D
005C:  BSF    08.7
005D:  BSF    03.5
005E:  BCF    08.7
.................... 	// dá um pulso na linha enable 
.................... 	output_high(lcd_enable); 
005F:  BCF    09.1
0060:  BCF    03.5
0061:  BSF    09.1
.................... 	output_low(lcd_enable); 
0062:  BSF    03.5
0063:  BCF    09.1
0064:  BCF    03.5
0065:  BCF    09.1
0066:  RETURN
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
.................... 	// coloca a linha rs em 0 
.................... 	output_low(lcd_rs); 
0067:  BSF    03.5
0068:  BCF    09.2
0069:  BCF    03.5
006A:  BCF    09.2
.................... 	// aguarda o display ficar desocupado 
.................... 	//while ( bit_test(lcd_le_byte(),7) ) ; 
.................... 	// configura a linha rs dependendo do modo selecionado 
.................... 	output_bit(lcd_rs,endereco); 
006B:  MOVF   2B,F
006C:  BTFSS  03.2
006D:  GOTO   070
006E:  BCF    09.2
006F:  GOTO   071
0070:  BSF    09.2
0071:  BSF    03.5
0072:  BCF    09.2
.................... 	delay_us(100);	// aguarda 100 us 
0073:  MOVLW  A6
0074:  MOVWF  77
0075:  DECFSZ 77,F
0076:  GOTO   075
0077:  NOP
.................... 	// caso a linha rw esteja definida, coloca em 0 
.................... 	#ifdef lcd_rw 
.................... 		output_low(lcd_rw); 
.................... 	#endif 
.................... 	// desativa linha enable 
.................... 	output_low(lcd_enable); 
0078:  BCF    09.1
0079:  BCF    03.5
007A:  BCF    09.1
.................... 	// envia a primeira parte do byte 
.................... 	lcd_envia_nibble(dado >> 4); 
007B:  SWAPF  2C,W
007C:  MOVWF  2D
007D:  MOVLW  0F
007E:  ANDWF  2D,F
007F:  MOVF   2D,W
0080:  MOVWF  2E
0081:  CALL   040
.................... 	// envia a segunda parte do byte 
.................... 	lcd_envia_nibble(dado & 0x0f); 
0082:  MOVF   2C,W
0083:  ANDLW  0F
0084:  MOVWF  2D
0085:  MOVWF  2E
0086:  CALL   040
0087:  RETURN
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicialização do display 
.................... { 
.................... 	byte conta; 
.................... 	output_low(lcd_d4); 
0088:  BSF    03.5
0089:  BCF    08.4
008A:  BCF    03.5
008B:  BCF    08.4
.................... 	output_low(lcd_d5); 
008C:  BSF    03.5
008D:  BCF    08.5
008E:  BCF    03.5
008F:  BCF    08.5
.................... 	output_low(lcd_d6); 
0090:  BSF    03.5
0091:  BCF    08.6
0092:  BCF    03.5
0093:  BCF    08.6
.................... 	output_low(lcd_d7); 
0094:  BSF    03.5
0095:  BCF    08.7
0096:  BCF    03.5
0097:  BCF    08.7
.................... 	output_low(lcd_rs); 
0098:  BSF    03.5
0099:  BCF    09.2
009A:  BCF    03.5
009B:  BCF    09.2
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
.................... 	output_low(lcd_enable); 
009C:  BSF    03.5
009D:  BCF    09.1
009E:  BCF    03.5
009F:  BCF    09.1
.................... 	delay_ms(15); 
00A0:  MOVLW  0F
00A1:  MOVWF  27
00A2:  CALL   02C
.................... 	// envia uma seqüência de 3 vezes 0x03 
.................... 	// e depois 0x02 para configurar o módulo 
.................... 	// para modo de 4 bits 
.................... 	for(conta=1;conta<=3;++conta) 
00A3:  MOVLW  01
00A4:  MOVWF  22
00A5:  MOVF   22,W
00A6:  SUBLW  03
00A7:  BTFSS  03.0
00A8:  GOTO   0B1
.................... 	{ 
.................... 		lcd_envia_nibble(3); 
00A9:  MOVLW  03
00AA:  MOVWF  2E
00AB:  CALL   040
.................... 		delay_ms(5); 
00AC:  MOVLW  05
00AD:  MOVWF  27
00AE:  CALL   02C
00AF:  INCF   22,F
00B0:  GOTO   0A5
.................... 	} 
.................... 	lcd_envia_nibble(2); 
00B1:  MOVLW  02
00B2:  MOVWF  2E
00B3:  CALL   040
.................... 	// envia string de inicialização do display 
.................... 	for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
00B4:  CLRF   22
00B5:  MOVF   22,W
00B6:  SUBLW  03
00B7:  BTFSS  03.0
00B8:  GOTO   0C2
00B9:  MOVF   22,W
00BA:  CALL   004
00BB:  MOVWF  23
00BC:  CLRF   2B
00BD:  MOVF   23,W
00BE:  MOVWF  2C
00BF:  CALL   067
00C0:  INCF   22,F
00C1:  GOTO   0B5
00C2:  BCF    0A.3
00C3:  BCF    0A.4
00C4:  GOTO   2E5 (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
00DF:  DECFSZ 28,W
00E0:  GOTO   0E2
00E1:  GOTO   0E5
....................    	endereco = lcd_seg_lin; 
00E2:  MOVLW  40
00E3:  MOVWF  29
00E4:  GOTO   0E6
....................    else 
....................    	endereco = 0; 
00E5:  CLRF   29
....................    endereco += x-1; 
00E6:  MOVLW  01
00E7:  SUBWF  27,W
00E8:  ADDWF  29,F
....................    lcd_envia_byte(0,0x80|endereco); 
00E9:  MOVF   29,W
00EA:  IORLW  80
00EB:  MOVWF  2A
00EC:  CLRF   2B
00ED:  MOVF   2A,W
00EE:  MOVWF  2C
00EF:  CALL   067
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
*
00C5:  MOVF   26,W
00C6:  XORLW  0C
00C7:  BTFSC  03.2
00C8:  GOTO   0D3
00C9:  XORLW  06
00CA:  BTFSC  03.2
00CB:  GOTO   0DB
00CC:  XORLW  07
00CD:  BTFSC  03.2
00CE:  GOTO   0DB
00CF:  XORLW  05
00D0:  BTFSC  03.2
00D1:  GOTO   0F1
00D2:  GOTO   0F6
.................... 	{ 
....................      case '\f' 	:	lcd_envia_byte(0,1); 
00D3:  CLRF   2B
00D4:  MOVLW  01
00D5:  MOVWF  2C
00D6:  CALL   067
.................... 	  			delay_ms(2); 
00D7:  MOVLW  02
00D8:  MOVWF  27
00D9:  CALL   02C
.................... 				break; 
00DA:  GOTO   0FB
....................      case '\n'	: 
.................... 	  case '\r' 	:	lcd_pos_xy(1,2); 
00DB:  MOVLW  01
00DC:  MOVWF  27
00DD:  MOVLW  02
00DE:  MOVWF  28
.................... 	  			break; 
*
00F0:  GOTO   0FB
....................      case '\b' 	:	lcd_envia_byte(0,0x10); 
00F1:  CLRF   2B
00F2:  MOVLW  10
00F3:  MOVWF  2C
00F4:  CALL   067
.................... 	  			break; 
00F5:  GOTO   0FB
....................      default	:	lcd_envia_byte(1,c); 
00F6:  MOVLW  01
00F7:  MOVWF  2B
00F8:  MOVF   26,W
00F9:  MOVWF  2C
00FA:  CALL   067
.................... 	  			break; 
....................    } 
00FB:  RETURN
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
.................... 	char valor; 
.................... 	// seleciona a posição do caractere 
.................... 	lcd_pos_xy(x,y); 
.................... 	// ativa rs 
.................... 	output_high(lcd_rs); 
.................... 	// lê o caractere 
.................... 	valor = lcd_le_byte(); 
.................... 	// desativa rs 
.................... 	output_low(lcd_rs); 
.................... 	// retorna o valor do caractere 
.................... 	return valor; 
.................... } 
....................  
.................... #include <kbd_ext_board2.c> 
.................... /*######################################################################  
....................  Rotina utilizaçãoo do teclado da placa PicSim board4 
....................  Adaptada para o compilador CCS 
....................  Autor: Alberto Willia Mascarenhas (adaptou para o compilador) 
....................  For e-mail suggestions : awmascarenhas@gmail.com 
.................... ######################################################################## */ 
.................... unsigned char tc_tecla(unsigned int timeout) 
*
0152:  CLRF   23
0153:  CLRF   24
.................... { 
....................     unsigned int to=0; 
....................     unsigned char k = 0;  
....................     while(((to < timeout)||(!timeout))&&(!k)){ 
0154:  MOVF   22,W
0155:  SUBWF  23,W
0156:  BTFSS  03.0
0157:  GOTO   15B
0158:  MOVF   22,F
0159:  BTFSS  03.2
015A:  GOTO   270
015B:  MOVF   24,F
015C:  BTFSS  03.2
015D:  GOTO   270
....................        //------------------------------------------------------------------------- 
....................        //inicio do programa de varredura do teclado matricial 
....................        //-------------------------------------------------------------------------- 
....................        //habilita primeira coluna do teclado 
....................        output_low(PIN_B0);output_high(PIN_B1);output_high(PIN_B2);output_high(PIN_B3); 
015E:  BSF    03.5
015F:  BCF    06.0
0160:  BCF    03.5
0161:  BCF    06.0
0162:  BSF    03.5
0163:  BCF    06.1
0164:  BCF    03.5
0165:  BSF    06.1
0166:  BSF    03.5
0167:  BCF    06.2
0168:  BCF    03.5
0169:  BSF    06.2
016A:  BSF    03.5
016B:  BCF    06.3
016C:  BCF    03.5
016D:  BSF    06.3
....................        delay_ms(20); 
016E:  MOVLW  14
016F:  MOVWF  27
0170:  CALL   02C
....................        if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='1';}; 
0171:  BSF    03.5
0172:  BSF    08.0
0173:  BCF    03.5
0174:  BTFSC  08.0
0175:  GOTO   17D
0176:  BSF    03.5
0177:  BSF    08.0
0178:  BCF    03.5
0179:  BTFSS  08.0
017A:  GOTO   176
017B:  MOVLW  31
017C:  MOVWF  24
....................        if (input(PIN_D1) == 0){ 
017D:  BSF    03.5
017E:  BSF    08.1
017F:  BCF    03.5
0180:  BTFSC  08.1
0181:  GOTO   189
....................           while(input(PIN_D1) == 0); 
0182:  BSF    03.5
0183:  BSF    08.1
0184:  BCF    03.5
0185:  BTFSS  08.1
0186:  GOTO   182
....................           k='4'; 
0187:  MOVLW  34
0188:  MOVWF  24
....................        }; 
....................        if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='7';}; 
0189:  BSF    03.5
018A:  BSF    08.2
018B:  BCF    03.5
018C:  BTFSC  08.2
018D:  GOTO   195
018E:  BSF    03.5
018F:  BSF    08.2
0190:  BCF    03.5
0191:  BTFSS  08.2
0192:  GOTO   18E
0193:  MOVLW  37
0194:  MOVWF  24
....................        if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='*';}; 
0195:  BSF    03.5
0196:  BSF    08.3
0197:  BCF    03.5
0198:  BTFSC  08.3
0199:  GOTO   1A1
019A:  BSF    03.5
019B:  BSF    08.3
019C:  BCF    03.5
019D:  BTFSS  08.3
019E:  GOTO   19A
019F:  MOVLW  2A
01A0:  MOVWF  24
....................        //habilita segunda coluna do teclado 
....................        output_high(PIN_B0);output_low(PIN_B1);output_high(PIN_B2);output_high(PIN_B3); 
01A1:  BSF    03.5
01A2:  BCF    06.0
01A3:  BCF    03.5
01A4:  BSF    06.0
01A5:  BSF    03.5
01A6:  BCF    06.1
01A7:  BCF    03.5
01A8:  BCF    06.1
01A9:  BSF    03.5
01AA:  BCF    06.2
01AB:  BCF    03.5
01AC:  BSF    06.2
01AD:  BSF    03.5
01AE:  BCF    06.3
01AF:  BCF    03.5
01B0:  BSF    06.3
....................        delay_ms(20);  
01B1:  MOVLW  14
01B2:  MOVWF  27
01B3:  CALL   02C
....................        if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='2';}; 
01B4:  BSF    03.5
01B5:  BSF    08.0
01B6:  BCF    03.5
01B7:  BTFSC  08.0
01B8:  GOTO   1C0
01B9:  BSF    03.5
01BA:  BSF    08.0
01BB:  BCF    03.5
01BC:  BTFSS  08.0
01BD:  GOTO   1B9
01BE:  MOVLW  32
01BF:  MOVWF  24
....................        if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='5';}; 
01C0:  BSF    03.5
01C1:  BSF    08.1
01C2:  BCF    03.5
01C3:  BTFSC  08.1
01C4:  GOTO   1CC
01C5:  BSF    03.5
01C6:  BSF    08.1
01C7:  BCF    03.5
01C8:  BTFSS  08.1
01C9:  GOTO   1C5
01CA:  MOVLW  35
01CB:  MOVWF  24
....................        if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='8';}; 
01CC:  BSF    03.5
01CD:  BSF    08.2
01CE:  BCF    03.5
01CF:  BTFSC  08.2
01D0:  GOTO   1D8
01D1:  BSF    03.5
01D2:  BSF    08.2
01D3:  BCF    03.5
01D4:  BTFSS  08.2
01D5:  GOTO   1D1
01D6:  MOVLW  38
01D7:  MOVWF  24
....................        if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='0';}; 
01D8:  BSF    03.5
01D9:  BSF    08.3
01DA:  BCF    03.5
01DB:  BTFSC  08.3
01DC:  GOTO   1E4
01DD:  BSF    03.5
01DE:  BSF    08.3
01DF:  BCF    03.5
01E0:  BTFSS  08.3
01E1:  GOTO   1DD
01E2:  MOVLW  30
01E3:  MOVWF  24
....................         
....................        //habilita terceira coluna do teclado 
....................        output_high(PIN_B0);output_high(PIN_B1);output_low(PIN_B2);output_high(PIN_B3); 
01E4:  BSF    03.5
01E5:  BCF    06.0
01E6:  BCF    03.5
01E7:  BSF    06.0
01E8:  BSF    03.5
01E9:  BCF    06.1
01EA:  BCF    03.5
01EB:  BSF    06.1
01EC:  BSF    03.5
01ED:  BCF    06.2
01EE:  BCF    03.5
01EF:  BCF    06.2
01F0:  BSF    03.5
01F1:  BCF    06.3
01F2:  BCF    03.5
01F3:  BSF    06.3
....................        delay_ms(20);  
01F4:  MOVLW  14
01F5:  MOVWF  27
01F6:  CALL   02C
....................        if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='3';}; 
01F7:  BSF    03.5
01F8:  BSF    08.0
01F9:  BCF    03.5
01FA:  BTFSC  08.0
01FB:  GOTO   203
01FC:  BSF    03.5
01FD:  BSF    08.0
01FE:  BCF    03.5
01FF:  BTFSS  08.0
0200:  GOTO   1FC
0201:  MOVLW  33
0202:  MOVWF  24
....................        if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='6';}; 
0203:  BSF    03.5
0204:  BSF    08.1
0205:  BCF    03.5
0206:  BTFSC  08.1
0207:  GOTO   20F
0208:  BSF    03.5
0209:  BSF    08.1
020A:  BCF    03.5
020B:  BTFSS  08.1
020C:  GOTO   208
020D:  MOVLW  36
020E:  MOVWF  24
....................        if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='9';}; 
020F:  BSF    03.5
0210:  BSF    08.2
0211:  BCF    03.5
0212:  BTFSC  08.2
0213:  GOTO   21B
0214:  BSF    03.5
0215:  BSF    08.2
0216:  BCF    03.5
0217:  BTFSS  08.2
0218:  GOTO   214
0219:  MOVLW  39
021A:  MOVWF  24
....................        if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='#';}; 
021B:  BSF    03.5
021C:  BSF    08.3
021D:  BCF    03.5
021E:  BTFSC  08.3
021F:  GOTO   227
0220:  BSF    03.5
0221:  BSF    08.3
0222:  BCF    03.5
0223:  BTFSS  08.3
0224:  GOTO   220
0225:  MOVLW  23
0226:  MOVWF  24
....................         
....................        //habilita quarta coluna do teclado 
....................        output_high(PIN_B0);output_high(PIN_B1);output_high(PIN_B2);output_low(PIN_B3); 
0227:  BSF    03.5
0228:  BCF    06.0
0229:  BCF    03.5
022A:  BSF    06.0
022B:  BSF    03.5
022C:  BCF    06.1
022D:  BCF    03.5
022E:  BSF    06.1
022F:  BSF    03.5
0230:  BCF    06.2
0231:  BCF    03.5
0232:  BSF    06.2
0233:  BSF    03.5
0234:  BCF    06.3
0235:  BCF    03.5
0236:  BCF    06.3
....................        delay_ms(20);  
0237:  MOVLW  14
0238:  MOVWF  27
0239:  CALL   02C
....................        if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='A';}; 
023A:  BSF    03.5
023B:  BSF    08.0
023C:  BCF    03.5
023D:  BTFSC  08.0
023E:  GOTO   246
023F:  BSF    03.5
0240:  BSF    08.0
0241:  BCF    03.5
0242:  BTFSS  08.0
0243:  GOTO   23F
0244:  MOVLW  41
0245:  MOVWF  24
....................        if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='B';}; 
0246:  BSF    03.5
0247:  BSF    08.1
0248:  BCF    03.5
0249:  BTFSC  08.1
024A:  GOTO   252
024B:  BSF    03.5
024C:  BSF    08.1
024D:  BCF    03.5
024E:  BTFSS  08.1
024F:  GOTO   24B
0250:  MOVLW  42
0251:  MOVWF  24
....................        if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='C';}; 
0252:  BSF    03.5
0253:  BSF    08.2
0254:  BCF    03.5
0255:  BTFSC  08.2
0256:  GOTO   25E
0257:  BSF    03.5
0258:  BSF    08.2
0259:  BCF    03.5
025A:  BTFSS  08.2
025B:  GOTO   257
025C:  MOVLW  43
025D:  MOVWF  24
....................        if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='D';}; 
025E:  BSF    03.5
025F:  BSF    08.3
0260:  BCF    03.5
0261:  BTFSC  08.3
0262:  GOTO   26A
0263:  BSF    03.5
0264:  BSF    08.3
0265:  BCF    03.5
0266:  BTFSS  08.3
0267:  GOTO   263
0268:  MOVLW  44
0269:  MOVWF  24
....................         
....................        delay_ms(5); 
026A:  MOVLW  05
026B:  MOVWF  27
026C:  CALL   02C
....................        to+=5; 
026D:  MOVLW  05
026E:  ADDWF  23,F
026F:  GOTO   154
....................     } 
....................     if(!k)k=255; 
0270:  MOVF   24,F
0271:  BTFSS  03.2
0272:  GOTO   275
0273:  MOVLW  FF
0274:  MOVWF  24
....................     return k;  
0275:  MOVF   24,W
0276:  MOVWF  78
0277:  BCF    0A.3
0278:  BCF    0A.4
0279:  GOTO   30D (RETURN)
.................... } 
....................  
....................  
.................... void main() 
*
02D3:  MOVF   03,W
02D4:  ANDLW  1F
02D5:  MOVWF  03
02D6:  MOVLW  FF
02D7:  MOVWF  20
02D8:  BSF    03.5
02D9:  BSF    1F.0
02DA:  BSF    1F.1
02DB:  BSF    1F.2
02DC:  BCF    1F.3
02DD:  MOVLW  07
02DE:  MOVWF  1C
02DF:  BCF    03.7
.................... { 
....................    unsigned char tmp; 
....................    delay_ms(100); 
02E0:  MOVLW  64
02E1:  BCF    03.5
02E2:  MOVWF  27
02E3:  CALL   02C
....................    lcd_ini(); 
02E4:  GOTO   088
....................    delay_ms(100); 
02E5:  MOVLW  64
02E6:  MOVWF  27
02E7:  CALL   02C
....................     
....................    printf(lcd_escreve, "\fIFMT 2022"); 
02E8:  MOVLW  0C
02E9:  BSF    03.6
02EA:  MOVWF  0D
02EB:  MOVLW  00
02EC:  MOVWF  0F
02ED:  BCF    03.6
02EE:  CALL   0FC
....................    delay_ms(1000); 
02EF:  MOVLW  04
02F0:  MOVWF  22
02F1:  MOVLW  FA
02F2:  MOVWF  27
02F3:  CALL   02C
02F4:  DECFSZ 22,F
02F5:  GOTO   2F1
....................    printf(lcd_escreve, "\f     TECLADO     "); 
02F6:  MOVLW  12
02F7:  BSF    03.6
02F8:  MOVWF  0D
02F9:  MOVLW  00
02FA:  MOVWF  0F
02FB:  BCF    03.6
02FC:  CALL   0FC
....................    delay_ms(2000); 
02FD:  MOVLW  08
02FE:  MOVWF  22
02FF:  MOVLW  FA
0300:  MOVWF  27
0301:  CALL   02C
0302:  DECFSZ 22,F
0303:  GOTO   2FF
....................     
....................    output_high(PIN_C4); 
0304:  BCF    20.4
0305:  MOVF   20,W
0306:  BSF    03.5
0307:  MOVWF  07
0308:  BCF    03.5
0309:  BSF    07.4
....................     
....................    while(TRUE) 
....................    { 
....................       tmp = tc_tecla(1500); 
030A:  MOVLW  DC
030B:  MOVWF  22
030C:  GOTO   152
030D:  MOVF   78,W
030E:  MOVWF  21
....................        
....................       if(tmp != 255){ 
030F:  INCFSZ 21,W
0310:  GOTO   312
0311:  GOTO   320
....................          printf(lcd_escreve, "\fButton %c", tmp); 
0312:  MOVLW  1C
0313:  BSF    03.6
0314:  MOVWF  0D
0315:  MOVLW  00
0316:  MOVWF  0F
0317:  BCF    03.0
0318:  MOVLW  08
0319:  BCF    03.6
031A:  MOVWF  22
031B:  GOTO   27A
031C:  MOVF   21,W
031D:  MOVWF  26
031E:  CALL   0C5
....................       }else{ 
031F:  GOTO   327
....................          printf(lcd_escreve, "\f     TECLADO L    "); 
0320:  MOVLW  22
0321:  BSF    03.6
0322:  MOVWF  0D
0323:  MOVLW  00
0324:  MOVWF  0F
0325:  BCF    03.6
0326:  CALL   0FC
....................       } 
0327:  GOTO   30A
....................    } 
....................  
.................... } 
0328:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
