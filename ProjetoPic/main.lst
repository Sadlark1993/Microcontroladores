CCS PCM C Compiler, Version 5.015, 5967               09-out-22 14:17

               Filename:   C:\Users\Sadla\OneDrive\Documentos\MEGAsync\doc\Facul\Microcontroladores\Projetos\ProjetoPic\main.lst

               ROM used:   937 words (11%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           36 (10%) worst case
               Stack used: 6 locations (4 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   33F
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.3
0028:  GOTO   02B
0029:  BTFSC  0B.0
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   06B
.................... //Projeto de PIC 
....................  
.................... //#include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDWF  02,F
0053:  RETLW  28
0054:  RETLW  0F
0055:  RETLW  01
0056:  RETLW  06
*
01A2:  DATA 8C,24
01A3:  DATA C6,26
01A4:  DATA 54,10
01A5:  DATA 32,18
01A6:  DATA 32,19
01A7:  DATA 00,00
01A8:  DATA 0C,10
01A9:  DATA 20,10
01AA:  DATA 20,10
01AB:  DATA D4,22
01AC:  DATA 43,26
01AD:  DATA 41,22
01AE:  DATA 4F,10
01AF:  DATA 20,10
01B0:  DATA 20,10
01B1:  DATA 00,01
01B2:  DATA 0C,21
01B3:  DATA 75,3A
01B4:  DATA F4,37
01B5:  DATA 6E,10
01B6:  DATA A5,31
01B7:  DATA 00,00
01B8:  DATA 0C,10
01B9:  DATA 20,10
01BA:  DATA 20,10
01BB:  DATA D4,22
01BC:  DATA 43,26
01BD:  DATA 41,22
01BE:  DATA 4F,10
01BF:  DATA 4C,10
01C0:  DATA 20,10
01C1:  DATA 20,00
*
0290:  MOVF   0B,W
0291:  MOVWF  2E
0292:  BCF    0B.7
0293:  BSF    03.5
0294:  BSF    03.6
0295:  BSF    0C.7
0296:  BSF    0C.0
0297:  NOP
0298:  NOP
0299:  BCF    03.5
029A:  BCF    03.6
029B:  BTFSC  2E.7
029C:  BSF    0B.7
029D:  BSF    03.6
029E:  MOVF   0C,W
029F:  ANDLW  7F
02A0:  BTFSC  03.2
02A1:  GOTO   2E4
02A2:  BCF    03.6
02A3:  MOVWF  2E
02A4:  BSF    03.6
02A5:  MOVF   0D,W
02A6:  BCF    03.6
02A7:  MOVWF  2F
02A8:  BSF    03.6
02A9:  MOVF   0F,W
02AA:  BCF    03.6
02AB:  MOVWF  30
02AC:  MOVF   2E,W
02AD:  MOVWF  32
02AE:  CALL   253
02AF:  MOVF   2F,W
02B0:  BSF    03.6
02B1:  MOVWF  0D
02B2:  BCF    03.6
02B3:  MOVF   30,W
02B4:  BSF    03.6
02B5:  MOVWF  0F
02B6:  BCF    03.6
02B7:  MOVF   0B,W
02B8:  MOVWF  31
02B9:  BCF    0B.7
02BA:  BSF    03.5
02BB:  BSF    03.6
02BC:  BSF    0C.7
02BD:  BSF    0C.0
02BE:  NOP
02BF:  NOP
02C0:  BCF    03.5
02C1:  BCF    03.6
02C2:  BTFSC  31.7
02C3:  BSF    0B.7
02C4:  BSF    03.6
02C5:  RLF    0C,W
02C6:  RLF    0E,W
02C7:  ANDLW  7F
02C8:  BTFSC  03.2
02C9:  GOTO   2E4
02CA:  BCF    03.6
02CB:  MOVWF  2E
02CC:  BSF    03.6
02CD:  MOVF   0D,W
02CE:  BCF    03.6
02CF:  MOVWF  2F
02D0:  BSF    03.6
02D1:  MOVF   0F,W
02D2:  BCF    03.6
02D3:  MOVWF  30
02D4:  MOVF   2E,W
02D5:  MOVWF  32
02D6:  CALL   253
02D7:  MOVF   2F,W
02D8:  BSF    03.6
02D9:  MOVWF  0D
02DA:  BCF    03.6
02DB:  MOVF   30,W
02DC:  BSF    03.6
02DD:  MOVWF  0F
02DE:  INCF   0D,F
02DF:  BTFSC  03.2
02E0:  INCF   0F,F
02E1:  BCF    03.6
02E2:  GOTO   290
02E3:  BSF    03.6
02E4:  BCF    03.6
02E5:  RETURN
02E6:  MOVF   0B,W
02E7:  MOVWF  2F
02E8:  BCF    0B.7
02E9:  BSF    03.5
02EA:  BSF    03.6
02EB:  BSF    0C.7
02EC:  BSF    0C.0
02ED:  NOP
02EE:  NOP
02EF:  BCF    03.5
02F0:  BCF    03.6
02F1:  BTFSC  2F.7
02F2:  BSF    0B.7
02F3:  BTFSC  03.0
02F4:  GOTO   31D
02F5:  BSF    03.6
02F6:  MOVF   0C,W
02F7:  ANDLW  7F
02F8:  BCF    03.6
02F9:  MOVWF  2F
02FA:  BSF    03.6
02FB:  MOVF   0D,W
02FC:  BCF    03.6
02FD:  MOVWF  30
02FE:  BSF    03.6
02FF:  MOVF   0F,W
0300:  BCF    03.6
0301:  MOVWF  31
0302:  MOVF   2F,W
0303:  MOVWF  32
0304:  CALL   253
0305:  MOVF   30,W
0306:  BSF    03.6
0307:  MOVWF  0D
0308:  BCF    03.6
0309:  MOVF   31,W
030A:  BSF    03.6
030B:  MOVWF  0F
030C:  BCF    03.6
030D:  MOVF   0B,W
030E:  MOVWF  32
030F:  BCF    0B.7
0310:  BSF    03.5
0311:  BSF    03.6
0312:  BSF    0C.7
0313:  BSF    0C.0
0314:  NOP
0315:  NOP
0316:  BCF    03.5
0317:  BCF    03.6
0318:  BTFSC  32.7
0319:  BSF    0B.7
031A:  DECFSZ 2E,F
031B:  GOTO   31D
031C:  GOTO   33C
031D:  BSF    03.6
031E:  RLF    0C,W
031F:  RLF    0E,W
0320:  ANDLW  7F
0321:  BCF    03.6
0322:  MOVWF  2F
0323:  BSF    03.6
0324:  MOVF   0D,W
0325:  BCF    03.6
0326:  MOVWF  30
0327:  BSF    03.6
0328:  MOVF   0F,W
0329:  BCF    03.6
032A:  MOVWF  31
032B:  MOVF   2F,W
032C:  MOVWF  32
032D:  CALL   253
032E:  MOVF   30,W
032F:  BSF    03.6
0330:  MOVWF  0D
0331:  BCF    03.6
0332:  MOVF   31,W
0333:  BSF    03.6
0334:  MOVWF  0F
0335:  INCF   0D,F
0336:  BTFSC  03.2
0337:  INCF   0F,F
0338:  BCF    03.0
0339:  BCF    03.6
033A:  DECFSZ 2E,F
033B:  GOTO   2E6
033C:  BCF    0A.3
033D:  BCF    0A.4
033E:  GOTO   39C (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0057:  MOVLW  3E
0058:  MOVWF  04
0059:  BCF    03.7
005A:  MOVF   00,W
005B:  BTFSC  03.2
005C:  GOTO   06A
005D:  MOVLW  06
005E:  MOVWF  78
005F:  CLRF   77
0060:  DECFSZ 77,F
0061:  GOTO   060
0062:  DECFSZ 78,F
0063:  GOTO   05F
0064:  MOVLW  7B
0065:  MOVWF  77
0066:  DECFSZ 77,F
0067:  GOTO   066
0068:  DECFSZ 00,F
0069:  GOTO   05D
006A:  RETURN
....................  
.................... //Esquema dos pinos do LCD 
.................... #ifndef lcd_enable 
....................    #define lcd_enable pin_E1 // pino enable do LCD 
....................    #define lcd_rs pin_E2 // pino rs do LCD 
....................    //#define lcd_rw pin_e2 // pino rw do LCD 
....................    #define lcd_d4 pin_d4 // pino de dados d4 do LCD 
....................    #define lcd_d5 pin_d5 // pino de dados d5 do LCD 
....................    #define lcd_d6 pin_d6 // pino de dados d6 do LCD 
....................    #define lcd_d7 pin_d7 // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... /* 
....................    Esquema dos pinos do teclado: 
....................     
....................    R1 = RD0 
....................    R2 = RD1 
....................    R3 = RD2 
....................    R4 = RD3 
....................    C1 = RB1 
....................    C2 = RB2 
....................    C3 = RB3 
....................    C4 = RB4 
.................... */ 
....................  
.................... #include <mod_lcd.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipulação de módulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: Fábio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
....................  
.................... // As definições a seguir são utilizadas para acesso aos pinos do display 
.................... // caso o pino RW não seja utilizado, comente a definição lcd_rw 
.................... #ifndef lcd_enable 
.................... 	#define lcd_enable 		pin_e1		// pino enable do LCD 
.................... 	#define lcd_rs			pin_e0		// pino rs do LCD 
.................... 	//#define lcd_rw		pin_e2		// pino rw do LCD 
.................... 	#define lcd_d4			pin_d4		// pino de dados d4 do LCD 
.................... 	#define lcd_d5			pin_d5		// pino de dados d5 do LCD 
.................... 	#define lcd_d6			pin_d6		// pino de dados d6 do LCD 
.................... 	#define lcd_d7			pin_d7		// pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endereço da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seqüência de inicialização do módulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xf, 1, 6}; 
....................  
.................... byte lcd_le_byte() 
.................... // lê um byte do LCD (somente com pino RW) 
.................... { 
.................... 	byte dado; 
.................... 	// configura os pinos de dados como entradas 
.................... 	input(lcd_d4); 
.................... 	input(lcd_d5); 
.................... 	input(lcd_d6); 
.................... 	input(lcd_d7); 
.................... 	// se o pino rw for utilizado, coloca em 1 
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
....................    output_high(lcd_enable); // habilita display 
.................... 	dado = 0;	// zera a variável de leitura 
.................... 	// lê os quatro bits mais significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,7); 
.................... 	if (input(lcd_d6)) bit_set(dado,6); 
.................... 	if (input(lcd_d5)) bit_set(dado,5); 
.................... 	if (input(lcd_d4)) bit_set(dado,4); 
.................... 	// dá um pulso na linha enable 
.................... 	output_low(lcd_enable); 
.................... 	output_high(lcd_enable); 
.................... 	// lê os quatro bits menos significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,3); 
.................... 	if (input(lcd_d6)) bit_set(dado,2); 
.................... 	if (input(lcd_d5)) bit_set(dado,1); 
.................... 	if (input(lcd_d4)) bit_set(dado,0); 
.................... 	output_low(lcd_enable);	// desabilita o display 
.................... 	return dado;	// retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
.................... 	// coloca os quatro bits nas saidas 
.................... 	output_bit(lcd_d4,bit_test(dado,0)); 
*
01C2:  BTFSC  3A.0
01C3:  GOTO   1C6
01C4:  BCF    08.4
01C5:  GOTO   1C7
01C6:  BSF    08.4
01C7:  BSF    03.5
01C8:  BCF    08.4
.................... 	output_bit(lcd_d5,bit_test(dado,1)); 
01C9:  BCF    03.5
01CA:  BTFSC  3A.1
01CB:  GOTO   1CE
01CC:  BCF    08.5
01CD:  GOTO   1CF
01CE:  BSF    08.5
01CF:  BSF    03.5
01D0:  BCF    08.5
.................... 	output_bit(lcd_d6,bit_test(dado,2)); 
01D1:  BCF    03.5
01D2:  BTFSC  3A.2
01D3:  GOTO   1D6
01D4:  BCF    08.6
01D5:  GOTO   1D7
01D6:  BSF    08.6
01D7:  BSF    03.5
01D8:  BCF    08.6
.................... 	output_bit(lcd_d7,bit_test(dado,3)); 
01D9:  BCF    03.5
01DA:  BTFSC  3A.3
01DB:  GOTO   1DE
01DC:  BCF    08.7
01DD:  GOTO   1DF
01DE:  BSF    08.7
01DF:  BSF    03.5
01E0:  BCF    08.7
.................... 	// dá um pulso na linha enable 
.................... 	output_high(lcd_enable); 
01E1:  BCF    09.1
01E2:  BCF    03.5
01E3:  BSF    09.1
.................... 	output_low(lcd_enable); 
01E4:  BSF    03.5
01E5:  BCF    09.1
01E6:  BCF    03.5
01E7:  BCF    09.1
01E8:  RETURN
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
.................... 	// coloca a linha rs em 0 
.................... 	output_low(lcd_rs); 
01E9:  BSF    03.5
01EA:  BCF    09.2
01EB:  BCF    03.5
01EC:  BCF    09.2
.................... 	// aguarda o display ficar desocupado 
.................... 	//while ( bit_test(lcd_le_byte(),7) ) ; 
.................... 	// configura a linha rs dependendo do modo selecionado 
.................... 	output_bit(lcd_rs,endereco); 
01ED:  MOVF   37,F
01EE:  BTFSS  03.2
01EF:  GOTO   1F2
01F0:  BCF    09.2
01F1:  GOTO   1F3
01F2:  BSF    09.2
01F3:  BSF    03.5
01F4:  BCF    09.2
.................... 	delay_us(100);	// aguarda 100 us 
01F5:  MOVLW  A6
01F6:  MOVWF  77
01F7:  DECFSZ 77,F
01F8:  GOTO   1F7
01F9:  NOP
.................... 	// caso a linha rw esteja definida, coloca em 0 
.................... 	#ifdef lcd_rw 
.................... 		output_low(lcd_rw); 
.................... 	#endif 
.................... 	// desativa linha enable 
.................... 	output_low(lcd_enable); 
01FA:  BCF    09.1
01FB:  BCF    03.5
01FC:  BCF    09.1
.................... 	// envia a primeira parte do byte 
.................... 	lcd_envia_nibble(dado >> 4); 
01FD:  SWAPF  38,W
01FE:  MOVWF  39
01FF:  MOVLW  0F
0200:  ANDWF  39,F
0201:  MOVF   39,W
0202:  MOVWF  3A
0203:  CALL   1C2
.................... 	// envia a segunda parte do byte 
.................... 	lcd_envia_nibble(dado & 0x0f); 
0204:  MOVF   38,W
0205:  ANDLW  0F
0206:  MOVWF  39
0207:  MOVWF  3A
0208:  CALL   1C2
0209:  RETURN
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicialização do display 
.................... { 
.................... 	byte conta; 
.................... 	output_low(lcd_d4); 
020A:  BSF    03.5
020B:  BCF    08.4
020C:  BCF    03.5
020D:  BCF    08.4
.................... 	output_low(lcd_d5); 
020E:  BSF    03.5
020F:  BCF    08.5
0210:  BCF    03.5
0211:  BCF    08.5
.................... 	output_low(lcd_d6); 
0212:  BSF    03.5
0213:  BCF    08.6
0214:  BCF    03.5
0215:  BCF    08.6
.................... 	output_low(lcd_d7); 
0216:  BSF    03.5
0217:  BCF    08.7
0218:  BCF    03.5
0219:  BCF    08.7
.................... 	output_low(lcd_rs); 
021A:  BSF    03.5
021B:  BCF    09.2
021C:  BCF    03.5
021D:  BCF    09.2
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
.................... 	output_low(lcd_enable); 
021E:  BSF    03.5
021F:  BCF    09.1
0220:  BCF    03.5
0221:  BCF    09.1
0222:  CLRF   2B
0223:  BTFSC  0B.7
0224:  BSF    2B.7
0225:  BCF    0B.7
.................... 	delay_ms(15); 
0226:  MOVLW  0F
0227:  MOVWF  3E
0228:  CALL   057
0229:  BTFSC  2B.7
022A:  BSF    0B.7
.................... 	// envia uma seqüência de 3 vezes 0x03 
.................... 	// e depois 0x02 para configurar o módulo 
.................... 	// para modo de 4 bits 
.................... 	for(conta=1;conta<=3;++conta) 
022B:  MOVLW  01
022C:  MOVWF  2E
022D:  MOVF   2E,W
022E:  SUBLW  03
022F:  BTFSS  03.0
0230:  GOTO   23F
.................... 	{ 
.................... 		lcd_envia_nibble(3); 
0231:  MOVLW  03
0232:  MOVWF  3A
0233:  CALL   1C2
0234:  CLRF   2B
0235:  BTFSC  0B.7
0236:  BSF    2B.7
0237:  BCF    0B.7
.................... 		delay_ms(5); 
0238:  MOVLW  05
0239:  MOVWF  3E
023A:  CALL   057
023B:  BTFSC  2B.7
023C:  BSF    0B.7
023D:  INCF   2E,F
023E:  GOTO   22D
.................... 	} 
.................... 	lcd_envia_nibble(2); 
023F:  MOVLW  02
0240:  MOVWF  3A
0241:  CALL   1C2
.................... 	// envia string de inicialização do display 
.................... 	for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
0242:  CLRF   2E
0243:  MOVF   2E,W
0244:  SUBLW  03
0245:  BTFSS  03.0
0246:  GOTO   250
0247:  MOVF   2E,W
0248:  CALL   04F
0249:  MOVWF  2F
024A:  CLRF   37
024B:  MOVF   2F,W
024C:  MOVWF  38
024D:  CALL   1E9
024E:  INCF   2E,F
024F:  GOTO   243
0250:  BCF    0A.3
0251:  BCF    0A.4
0252:  GOTO   35E (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
0273:  DECFSZ 34,W
0274:  GOTO   276
0275:  GOTO   279
....................    	endereco = lcd_seg_lin; 
0276:  MOVLW  40
0277:  MOVWF  35
0278:  GOTO   27A
....................    else 
....................    	endereco = 0; 
0279:  CLRF   35
....................    endereco += x-1; 
027A:  MOVLW  01
027B:  SUBWF  33,W
027C:  ADDWF  35,F
....................    lcd_envia_byte(0,0x80|endereco); 
027D:  MOVF   35,W
027E:  IORLW  80
027F:  MOVWF  36
0280:  CLRF   37
0281:  MOVF   36,W
0282:  MOVWF  38
0283:  CALL   1E9
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
*
0253:  MOVF   32,W
0254:  XORLW  0C
0255:  BTFSC  03.2
0256:  GOTO   261
0257:  XORLW  06
0258:  BTFSC  03.2
0259:  GOTO   26F
025A:  XORLW  07
025B:  BTFSC  03.2
025C:  GOTO   26F
025D:  XORLW  05
025E:  BTFSC  03.2
025F:  GOTO   285
0260:  GOTO   28A
.................... 	{ 
....................      case '\f' 	:	lcd_envia_byte(0,1); 
0261:  CLRF   37
0262:  MOVLW  01
0263:  MOVWF  38
0264:  CALL   1E9
0265:  CLRF   2B
0266:  BTFSC  0B.7
0267:  BSF    2B.7
0268:  BCF    0B.7
.................... 	  			delay_ms(2); 
0269:  MOVLW  02
026A:  MOVWF  3E
026B:  CALL   057
026C:  BTFSC  2B.7
026D:  BSF    0B.7
.................... 				break; 
026E:  GOTO   28F
....................      case '\n'	: 
.................... 	  case '\r' 	:	lcd_pos_xy(1,2); 
026F:  MOVLW  01
0270:  MOVWF  33
0271:  MOVLW  02
0272:  MOVWF  34
.................... 	  			break; 
*
0284:  GOTO   28F
....................      case '\b' 	:	lcd_envia_byte(0,0x10); 
0285:  CLRF   37
0286:  MOVLW  10
0287:  MOVWF  38
0288:  CALL   1E9
.................... 	  			break; 
0289:  GOTO   28F
....................      default	:	lcd_envia_byte(1,c); 
028A:  MOVLW  01
028B:  MOVWF  37
028C:  MOVF   32,W
028D:  MOVWF  38
028E:  CALL   1E9
.................... 	  			break; 
....................    } 
028F:  RETURN
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
.................... 	char valor; 
.................... 	// seleciona a posição do caractere 
.................... 	lcd_pos_xy(x,y); 
.................... 	// ativa rs 
.................... 	output_high(lcd_rs); 
.................... 	// lê o caractere 
.................... 	valor = lcd_le_byte(); 
.................... 	// desativa rs 
.................... 	output_low(lcd_rs); 
.................... 	// retorna o valor do caractere 
.................... 	return valor; 
.................... } 
....................  
.................... #include "kbd_ext_board2.c" 
.................... /*######################################################################  
....................  Rotina utilizaçãoo do teclado da placa PicSim board4 
....................  Adaptada para o compilador CCS 
....................  Autor: Alberto Willia Mascarenhas (adaptou para o compilador) 
....................  For e-mail suggestions : awmascarenhas@gmail.com 
.................... ######################################################################## */ 
....................  
.................... //Alterei os pinos das colunas para poder utilizar interrupcao pelo B0 
....................  
.................... //Keypad connection: 
.................... #define row0 PIN_B4 
.................... #define row1 PIN_B5 
.................... #define row2 PIN_B6 
.................... #define row3 PIN_B7 
.................... #define col0 PIN_B0 
.................... #define col1 PIN_B1 
.................... #define col2 PIN_B2 
.................... #define col3 PIN_B3 
....................  
....................  
.................... unsigned char tc_tecla(unsigned int timeout) 
*
006F:  CLRF   3C
0070:  CLRF   3D
.................... { 
....................     unsigned int to=0; 
....................     unsigned char k = 0;  
....................     while(((to < timeout)||(!timeout))&&(!k)){ 
0071:  MOVF   3B,W
0072:  SUBWF  3C,W
0073:  BTFSS  03.0
0074:  GOTO   078
0075:  MOVF   3B,F
0076:  BTFSS  03.2
0077:  GOTO   18D
0078:  MOVF   3D,F
0079:  BTFSS  03.2
007A:  GOTO   18D
....................        //------------------------------------------------------------------------- 
....................        //inicio do programa de varredura do teclado matricial 
....................        //-------------------------------------------------------------------------- 
....................        //habilita primeira coluna do teclado 
....................        output_low(col0);output_high(col1);output_high(col2);output_high(col3); 
007B:  BSF    03.5
007C:  BCF    06.0
007D:  BCF    03.5
007E:  BCF    06.0
007F:  BSF    03.5
0080:  BCF    06.1
0081:  BCF    03.5
0082:  BSF    06.1
0083:  BSF    03.5
0084:  BCF    06.2
0085:  BCF    03.5
0086:  BSF    06.2
0087:  BSF    03.5
0088:  BCF    06.3
0089:  BCF    03.5
008A:  BSF    06.3
....................        delay_ms(20); 
008B:  MOVLW  14
008C:  MOVWF  3E
008D:  CALL   057
....................        if (input(row0) == 0){while(input(row0) == 0);k='1';}; 
008E:  BSF    03.5
008F:  BSF    06.4
0090:  BCF    03.5
0091:  BTFSC  06.4
0092:  GOTO   09A
0093:  BSF    03.5
0094:  BSF    06.4
0095:  BCF    03.5
0096:  BTFSS  06.4
0097:  GOTO   093
0098:  MOVLW  31
0099:  MOVWF  3D
....................        if (input(row1) == 0){while(input(row1) == 0);k='4';}; 
009A:  BSF    03.5
009B:  BSF    06.5
009C:  BCF    03.5
009D:  BTFSC  06.5
009E:  GOTO   0A6
009F:  BSF    03.5
00A0:  BSF    06.5
00A1:  BCF    03.5
00A2:  BTFSS  06.5
00A3:  GOTO   09F
00A4:  MOVLW  34
00A5:  MOVWF  3D
....................        if (input(row2) == 0){while(input(row2) == 0);k='7';}; 
00A6:  BSF    03.5
00A7:  BSF    06.6
00A8:  BCF    03.5
00A9:  BTFSC  06.6
00AA:  GOTO   0B2
00AB:  BSF    03.5
00AC:  BSF    06.6
00AD:  BCF    03.5
00AE:  BTFSS  06.6
00AF:  GOTO   0AB
00B0:  MOVLW  37
00B1:  MOVWF  3D
....................        if (input(row3) == 0){while(input(row3) == 0);k='*';}; 
00B2:  BSF    03.5
00B3:  BSF    06.7
00B4:  BCF    03.5
00B5:  BTFSC  06.7
00B6:  GOTO   0BE
00B7:  BSF    03.5
00B8:  BSF    06.7
00B9:  BCF    03.5
00BA:  BTFSS  06.7
00BB:  GOTO   0B7
00BC:  MOVLW  2A
00BD:  MOVWF  3D
....................        //habilita segunda coluna do teclado 
....................        output_high(col0);output_low(col1);output_high(col2);output_high(col3); 
00BE:  BSF    03.5
00BF:  BCF    06.0
00C0:  BCF    03.5
00C1:  BSF    06.0
00C2:  BSF    03.5
00C3:  BCF    06.1
00C4:  BCF    03.5
00C5:  BCF    06.1
00C6:  BSF    03.5
00C7:  BCF    06.2
00C8:  BCF    03.5
00C9:  BSF    06.2
00CA:  BSF    03.5
00CB:  BCF    06.3
00CC:  BCF    03.5
00CD:  BSF    06.3
....................        delay_ms(20);  
00CE:  MOVLW  14
00CF:  MOVWF  3E
00D0:  CALL   057
....................        if (input(row0) == 0){while(input(row0) == 0);k='2';}; 
00D1:  BSF    03.5
00D2:  BSF    06.4
00D3:  BCF    03.5
00D4:  BTFSC  06.4
00D5:  GOTO   0DD
00D6:  BSF    03.5
00D7:  BSF    06.4
00D8:  BCF    03.5
00D9:  BTFSS  06.4
00DA:  GOTO   0D6
00DB:  MOVLW  32
00DC:  MOVWF  3D
....................        if (input(row1) == 0){while(input(row1) == 0);k='5';}; 
00DD:  BSF    03.5
00DE:  BSF    06.5
00DF:  BCF    03.5
00E0:  BTFSC  06.5
00E1:  GOTO   0E9
00E2:  BSF    03.5
00E3:  BSF    06.5
00E4:  BCF    03.5
00E5:  BTFSS  06.5
00E6:  GOTO   0E2
00E7:  MOVLW  35
00E8:  MOVWF  3D
....................        if (input(row2) == 0){while(input(row2) == 0);k='8';}; 
00E9:  BSF    03.5
00EA:  BSF    06.6
00EB:  BCF    03.5
00EC:  BTFSC  06.6
00ED:  GOTO   0F5
00EE:  BSF    03.5
00EF:  BSF    06.6
00F0:  BCF    03.5
00F1:  BTFSS  06.6
00F2:  GOTO   0EE
00F3:  MOVLW  38
00F4:  MOVWF  3D
....................        if (input(row3) == 0){while(input(row3) == 0);k='0';}; 
00F5:  BSF    03.5
00F6:  BSF    06.7
00F7:  BCF    03.5
00F8:  BTFSC  06.7
00F9:  GOTO   101
00FA:  BSF    03.5
00FB:  BSF    06.7
00FC:  BCF    03.5
00FD:  BTFSS  06.7
00FE:  GOTO   0FA
00FF:  MOVLW  30
0100:  MOVWF  3D
....................         
....................        //habilita terceira coluna do teclado 
....................        output_high(col0);output_high(col1);output_low(col2);output_high(col3); 
0101:  BSF    03.5
0102:  BCF    06.0
0103:  BCF    03.5
0104:  BSF    06.0
0105:  BSF    03.5
0106:  BCF    06.1
0107:  BCF    03.5
0108:  BSF    06.1
0109:  BSF    03.5
010A:  BCF    06.2
010B:  BCF    03.5
010C:  BCF    06.2
010D:  BSF    03.5
010E:  BCF    06.3
010F:  BCF    03.5
0110:  BSF    06.3
....................        delay_ms(20);  
0111:  MOVLW  14
0112:  MOVWF  3E
0113:  CALL   057
....................        if (input(row0) == 0){while(input(row0) == 0);k='3';}; 
0114:  BSF    03.5
0115:  BSF    06.4
0116:  BCF    03.5
0117:  BTFSC  06.4
0118:  GOTO   120
0119:  BSF    03.5
011A:  BSF    06.4
011B:  BCF    03.5
011C:  BTFSS  06.4
011D:  GOTO   119
011E:  MOVLW  33
011F:  MOVWF  3D
....................        if (input(row1) == 0){while(input(row1) == 0);k='6';}; 
0120:  BSF    03.5
0121:  BSF    06.5
0122:  BCF    03.5
0123:  BTFSC  06.5
0124:  GOTO   12C
0125:  BSF    03.5
0126:  BSF    06.5
0127:  BCF    03.5
0128:  BTFSS  06.5
0129:  GOTO   125
012A:  MOVLW  36
012B:  MOVWF  3D
....................        if (input(row2) == 0){while(input(row2) == 0);k='9';}; 
012C:  BSF    03.5
012D:  BSF    06.6
012E:  BCF    03.5
012F:  BTFSC  06.6
0130:  GOTO   138
0131:  BSF    03.5
0132:  BSF    06.6
0133:  BCF    03.5
0134:  BTFSS  06.6
0135:  GOTO   131
0136:  MOVLW  39
0137:  MOVWF  3D
....................        if (input(row3) == 0){while(input(row3) == 0);k='#';}; 
0138:  BSF    03.5
0139:  BSF    06.7
013A:  BCF    03.5
013B:  BTFSC  06.7
013C:  GOTO   144
013D:  BSF    03.5
013E:  BSF    06.7
013F:  BCF    03.5
0140:  BTFSS  06.7
0141:  GOTO   13D
0142:  MOVLW  23
0143:  MOVWF  3D
....................         
....................        //habilita quarta coluna do teclado 
....................        output_high(col0);output_high(col1);output_high(col2);output_low(col3); 
0144:  BSF    03.5
0145:  BCF    06.0
0146:  BCF    03.5
0147:  BSF    06.0
0148:  BSF    03.5
0149:  BCF    06.1
014A:  BCF    03.5
014B:  BSF    06.1
014C:  BSF    03.5
014D:  BCF    06.2
014E:  BCF    03.5
014F:  BSF    06.2
0150:  BSF    03.5
0151:  BCF    06.3
0152:  BCF    03.5
0153:  BCF    06.3
....................        delay_ms(20);  
0154:  MOVLW  14
0155:  MOVWF  3E
0156:  CALL   057
....................        if (input(row0) == 0){while(input(row0) == 0);k='A';}; 
0157:  BSF    03.5
0158:  BSF    06.4
0159:  BCF    03.5
015A:  BTFSC  06.4
015B:  GOTO   163
015C:  BSF    03.5
015D:  BSF    06.4
015E:  BCF    03.5
015F:  BTFSS  06.4
0160:  GOTO   15C
0161:  MOVLW  41
0162:  MOVWF  3D
....................        if (input(row1) == 0){while(input(row1) == 0);k='B';}; 
0163:  BSF    03.5
0164:  BSF    06.5
0165:  BCF    03.5
0166:  BTFSC  06.5
0167:  GOTO   16F
0168:  BSF    03.5
0169:  BSF    06.5
016A:  BCF    03.5
016B:  BTFSS  06.5
016C:  GOTO   168
016D:  MOVLW  42
016E:  MOVWF  3D
....................        if (input(row2) == 0){while(input(row2) == 0);k='C';}; 
016F:  BSF    03.5
0170:  BSF    06.6
0171:  BCF    03.5
0172:  BTFSC  06.6
0173:  GOTO   17B
0174:  BSF    03.5
0175:  BSF    06.6
0176:  BCF    03.5
0177:  BTFSS  06.6
0178:  GOTO   174
0179:  MOVLW  43
017A:  MOVWF  3D
....................        if (input(row3) == 0){while(input(row3) == 0);k='D';}; 
017B:  BSF    03.5
017C:  BSF    06.7
017D:  BCF    03.5
017E:  BTFSC  06.7
017F:  GOTO   187
0180:  BSF    03.5
0181:  BSF    06.7
0182:  BCF    03.5
0183:  BTFSS  06.7
0184:  GOTO   180
0185:  MOVLW  44
0186:  MOVWF  3D
....................         
....................        delay_ms(5); 
0187:  MOVLW  05
0188:  MOVWF  3E
0189:  CALL   057
....................        to+=5; 
018A:  MOVLW  05
018B:  ADDWF  3C,F
018C:  GOTO   071
....................     } 
....................     if(!k)k=255; 
018D:  MOVF   3D,F
018E:  BTFSS  03.2
018F:  GOTO   192
0190:  MOVLW  FF
0191:  MOVWF  3D
....................     return k;  
0192:  MOVF   3D,W
0193:  MOVWF  78
.................... } 
....................  
....................  
.................... unsigned char tmp; 
....................  
.................... #INT_RB 
.................... void  RB_isr(void)  
.................... { 
....................    clear_interrupt(INT_RB); 
*
006B:  BCF    0B.0
....................    disable_interrupts(INT_RB); 
006C:  BCF    0B.3
....................    tmp = tc_tecla(1500); 
006D:  MOVLW  DC
006E:  MOVWF  3B
*
0194:  MOVF   78,W
0195:  MOVWF  2C
....................    output_toggle(PIN_C4); 
0196:  BCF    2D.4
0197:  MOVF   2D,W
0198:  BSF    03.5
0199:  MOVWF  07
019A:  MOVLW  10
019B:  BCF    03.5
019C:  XORWF  07,F
....................    enable_interrupts(INT_RB); 
019D:  BSF    0B.3
019E:  BCF    0B.0
019F:  BCF    0A.3
01A0:  BCF    0A.4
01A1:  GOTO   02B
.................... } 
....................  
.................... void main() 
*
033F:  MOVF   03,W
0340:  ANDLW  1F
0341:  MOVWF  03
0342:  MOVLW  FF
0343:  MOVWF  2D
0344:  BSF    03.5
0345:  BSF    1F.0
0346:  BSF    1F.1
0347:  BSF    1F.2
0348:  BCF    1F.3
0349:  MOVLW  07
034A:  MOVWF  1C
034B:  BCF    03.7
.................... { 
....................    //setando portas b 
....................    set_tris_b(0xF0); 
034C:  MOVLW  F0
034D:  MOVWF  06
....................    port_b_pullups(true); 
034E:  BCF    01.7
....................     
....................    clear_interrupt(INT_RB); 
034F:  BCF    03.5
0350:  BCF    0B.0
....................    enable_interrupts(INT_RB); 
0351:  BSF    0B.3
....................    enable_interrupts(GLOBAL); 
0352:  MOVLW  C0
0353:  IORWF  0B,F
0354:  CLRF   2B
0355:  BTFSC  0B.7
0356:  BSF    2B.7
0357:  BCF    0B.7
....................     
....................    delay_ms(100); 
0358:  MOVLW  64
0359:  MOVWF  3E
035A:  CALL   057
035B:  BTFSC  2B.7
035C:  BSF    0B.7
....................    lcd_ini(); 
035D:  GOTO   20A
035E:  CLRF   2B
035F:  BTFSC  0B.7
0360:  BSF    2B.7
0361:  BCF    0B.7
....................    delay_ms(100); 
0362:  MOVLW  64
0363:  MOVWF  3E
0364:  CALL   057
0365:  BTFSC  2B.7
0366:  BSF    0B.7
....................     
....................    printf(lcd_escreve, "\fIFMT 2022"); 
0367:  MOVLW  A2
0368:  BSF    03.6
0369:  MOVWF  0D
036A:  MOVLW  01
036B:  MOVWF  0F
036C:  BCF    03.6
036D:  CALL   290
....................    delay_ms(1000); 
036E:  MOVLW  04
036F:  MOVWF  2E
0370:  CLRF   2B
0371:  BTFSC  0B.7
0372:  BSF    2B.7
0373:  BCF    0B.7
0374:  MOVLW  FA
0375:  MOVWF  3E
0376:  CALL   057
0377:  BTFSC  2B.7
0378:  BSF    0B.7
0379:  DECFSZ 2E,F
037A:  GOTO   370
....................    printf(lcd_escreve, "\f     TECLADO     "); 
037B:  MOVLW  A8
037C:  BSF    03.6
037D:  MOVWF  0D
037E:  MOVLW  01
037F:  MOVWF  0F
0380:  BCF    03.6
0381:  CALL   290
....................    delay_ms(2000); 
0382:  MOVLW  08
0383:  MOVWF  2E
0384:  CLRF   2B
0385:  BTFSC  0B.7
0386:  BSF    2B.7
0387:  BCF    0B.7
0388:  MOVLW  FA
0389:  MOVWF  3E
038A:  CALL   057
038B:  BTFSC  2B.7
038C:  BSF    0B.7
038D:  DECFSZ 2E,F
038E:  GOTO   384
....................     
....................    while(TRUE) 
....................    { 
....................       if(tmp != 255){ 
038F:  INCFSZ 2C,W
0390:  GOTO   392
0391:  GOTO   3A0
....................          printf(lcd_escreve, "\fButton %c", tmp); 
0392:  MOVLW  B2
0393:  BSF    03.6
0394:  MOVWF  0D
0395:  MOVLW  01
0396:  MOVWF  0F
0397:  BCF    03.0
0398:  MOVLW  08
0399:  BCF    03.6
039A:  MOVWF  2E
039B:  GOTO   2E6
039C:  MOVF   2C,W
039D:  MOVWF  32
039E:  CALL   253
....................       }else{ 
039F:  GOTO   3A7
....................          printf(lcd_escreve, "\f     TECLADO L    "); 
03A0:  MOVLW  B8
03A1:  BSF    03.6
03A2:  MOVWF  0D
03A3:  MOVLW  01
03A4:  MOVWF  0F
03A5:  BCF    03.6
03A6:  CALL   290
....................       } 
03A7:  GOTO   38F
....................    } 
.................... } 
03A8:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
