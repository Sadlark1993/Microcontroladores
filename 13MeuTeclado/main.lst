CCS PCM C Compiler, Version 5.015, 5967               11-out-22 00:49

               Filename:   C:\Users\Sadla\OneDrive\Documentos\MEGAsync\doc\Facul\Microcontroladores\Projetos\13MeuTeclado\main.lst

               ROM used:   797 words (10%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           20 (5%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2C9
0003:  NOP
.................... //****LCD E TECLADO**** 
.................... //pino da coluna: output 
.................... //pino da linha: input 
....................  
.................... //#include <teclado.h> 
....................  
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0F
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8C,24
000D:  DATA C6,26
000E:  DATA 54,10
000F:  DATA 32,18
0010:  DATA 32,19
0011:  DATA 00,00
0012:  DATA 0C,10
0013:  DATA 20,10
0014:  DATA 20,10
0015:  DATA D4,22
0016:  DATA 43,26
0017:  DATA 41,22
0018:  DATA 4F,10
0019:  DATA 20,10
001A:  DATA 20,10
001B:  DATA 00,01
001C:  DATA 0C,21
001D:  DATA 75,3A
001E:  DATA F4,37
001F:  DATA 6E,10
0020:  DATA A5,31
0021:  DATA 00,00
*
00F2:  MOVF   0B,W
00F3:  MOVWF  22
00F4:  BCF    0B.7
00F5:  BSF    03.5
00F6:  BSF    03.6
00F7:  BSF    0C.7
00F8:  BSF    0C.0
00F9:  NOP
00FA:  NOP
00FB:  BCF    03.5
00FC:  BCF    03.6
00FD:  BTFSC  22.7
00FE:  BSF    0B.7
00FF:  BSF    03.6
0100:  MOVF   0C,W
0101:  ANDLW  7F
0102:  BTFSC  03.2
0103:  GOTO   146
0104:  BCF    03.6
0105:  MOVWF  22
0106:  BSF    03.6
0107:  MOVF   0D,W
0108:  BCF    03.6
0109:  MOVWF  23
010A:  BSF    03.6
010B:  MOVF   0F,W
010C:  BCF    03.6
010D:  MOVWF  24
010E:  MOVF   22,W
010F:  MOVWF  26
0110:  CALL   0BB
0111:  MOVF   23,W
0112:  BSF    03.6
0113:  MOVWF  0D
0114:  BCF    03.6
0115:  MOVF   24,W
0116:  BSF    03.6
0117:  MOVWF  0F
0118:  BCF    03.6
0119:  MOVF   0B,W
011A:  MOVWF  25
011B:  BCF    0B.7
011C:  BSF    03.5
011D:  BSF    03.6
011E:  BSF    0C.7
011F:  BSF    0C.0
0120:  NOP
0121:  NOP
0122:  BCF    03.5
0123:  BCF    03.6
0124:  BTFSC  25.7
0125:  BSF    0B.7
0126:  BSF    03.6
0127:  RLF    0C,W
0128:  RLF    0E,W
0129:  ANDLW  7F
012A:  BTFSC  03.2
012B:  GOTO   146
012C:  BCF    03.6
012D:  MOVWF  22
012E:  BSF    03.6
012F:  MOVF   0D,W
0130:  BCF    03.6
0131:  MOVWF  23
0132:  BSF    03.6
0133:  MOVF   0F,W
0134:  BCF    03.6
0135:  MOVWF  24
0136:  MOVF   22,W
0137:  MOVWF  26
0138:  CALL   0BB
0139:  MOVF   23,W
013A:  BSF    03.6
013B:  MOVWF  0D
013C:  BCF    03.6
013D:  MOVF   24,W
013E:  BSF    03.6
013F:  MOVWF  0F
0140:  INCF   0D,F
0141:  BTFSC  03.2
0142:  INCF   0F,F
0143:  BCF    03.6
0144:  GOTO   0F2
0145:  BSF    03.6
0146:  BCF    03.6
0147:  RETURN
*
0270:  MOVF   0B,W
0271:  MOVWF  23
0272:  BCF    0B.7
0273:  BSF    03.5
0274:  BSF    03.6
0275:  BSF    0C.7
0276:  BSF    0C.0
0277:  NOP
0278:  NOP
0279:  BCF    03.5
027A:  BCF    03.6
027B:  BTFSC  23.7
027C:  BSF    0B.7
027D:  BTFSC  03.0
027E:  GOTO   2A7
027F:  BSF    03.6
0280:  MOVF   0C,W
0281:  ANDLW  7F
0282:  BCF    03.6
0283:  MOVWF  23
0284:  BSF    03.6
0285:  MOVF   0D,W
0286:  BCF    03.6
0287:  MOVWF  24
0288:  BSF    03.6
0289:  MOVF   0F,W
028A:  BCF    03.6
028B:  MOVWF  25
028C:  MOVF   23,W
028D:  MOVWF  26
028E:  CALL   0BB
028F:  MOVF   24,W
0290:  BSF    03.6
0291:  MOVWF  0D
0292:  BCF    03.6
0293:  MOVF   25,W
0294:  BSF    03.6
0295:  MOVWF  0F
0296:  BCF    03.6
0297:  MOVF   0B,W
0298:  MOVWF  26
0299:  BCF    0B.7
029A:  BSF    03.5
029B:  BSF    03.6
029C:  BSF    0C.7
029D:  BSF    0C.0
029E:  NOP
029F:  NOP
02A0:  BCF    03.5
02A1:  BCF    03.6
02A2:  BTFSC  26.7
02A3:  BSF    0B.7
02A4:  DECFSZ 22,F
02A5:  GOTO   2A7
02A6:  GOTO   2C6
02A7:  BSF    03.6
02A8:  RLF    0C,W
02A9:  RLF    0E,W
02AA:  ANDLW  7F
02AB:  BCF    03.6
02AC:  MOVWF  23
02AD:  BSF    03.6
02AE:  MOVF   0D,W
02AF:  BCF    03.6
02B0:  MOVWF  24
02B1:  BSF    03.6
02B2:  MOVF   0F,W
02B3:  BCF    03.6
02B4:  MOVWF  25
02B5:  MOVF   23,W
02B6:  MOVWF  26
02B7:  CALL   0BB
02B8:  MOVF   24,W
02B9:  BSF    03.6
02BA:  MOVWF  0D
02BB:  BCF    03.6
02BC:  MOVF   25,W
02BD:  BSF    03.6
02BE:  MOVWF  0F
02BF:  INCF   0D,F
02C0:  BTFSC  03.2
02C1:  INCF   0F,F
02C2:  BCF    03.0
02C3:  BCF    03.6
02C4:  DECFSZ 22,F
02C5:  GOTO   270
02C6:  BCF    0A.3
02C7:  BCF    0A.4
02C8:  GOTO   315 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0022:  MOVLW  27
0023:  MOVWF  04
0024:  BCF    03.7
0025:  MOVF   00,W
0026:  BTFSC  03.2
0027:  GOTO   035
0028:  MOVLW  06
0029:  MOVWF  78
002A:  CLRF   77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  DECFSZ 78,F
002E:  GOTO   02A
002F:  MOVLW  7B
0030:  MOVWF  77
0031:  DECFSZ 77,F
0032:  GOTO   031
0033:  DECFSZ 00,F
0034:  GOTO   028
0035:  RETURN
....................  
.................... #ifndef lcd_enable 
....................    #define lcd_enable pin_E1 // pino enable do LCD 
....................    #define lcd_rs pin_E2 // pino rs do LCD 
....................    //#define lcd_rw pin_e2 // pino rw do LCD 
....................    #define lcd_d4 pin_d4 // pino de dados d4 do LCD 
....................    #define lcd_d5 pin_d5 // pino de dados d5 do LCD 
....................    #define lcd_d6 pin_d6 // pino de dados d6 do LCD 
....................    #define lcd_d7 pin_d7 // pino de dados d7 do LCD 
.................... #endif 
....................  
....................  
.................... #include <mod_lcd.c> 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipulação de módulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: Fábio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
....................  
.................... // As definições a seguir são utilizadas para acesso aos pinos do display 
.................... // caso o pino RW não seja utilizado, comente a definição lcd_rw 
.................... #ifndef lcd_enable 
.................... 	#define lcd_enable 		pin_e1		// pino enable do LCD 
.................... 	#define lcd_rs			pin_e0		// pino rs do LCD 
.................... 	//#define lcd_rw		pin_e2		// pino rw do LCD 
.................... 	#define lcd_d4			pin_d4		// pino de dados d4 do LCD 
.................... 	#define lcd_d5			pin_d5		// pino de dados d5 do LCD 
.................... 	#define lcd_d6			pin_d6		// pino de dados d6 do LCD 
.................... 	#define lcd_d7			pin_d7		// pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endereço da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seqüência de inicialização do módulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xf, 1, 6}; 
....................  
.................... byte lcd_le_byte() 
.................... // lê um byte do LCD (somente com pino RW) 
.................... { 
.................... 	byte dado; 
.................... 	// configura os pinos de dados como entradas 
.................... 	input(lcd_d4); 
.................... 	input(lcd_d5); 
.................... 	input(lcd_d6); 
.................... 	input(lcd_d7); 
.................... 	// se o pino rw for utilizado, coloca em 1 
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
....................    output_high(lcd_enable); // habilita display 
.................... 	dado = 0;	// zera a variável de leitura 
.................... 	// lê os quatro bits mais significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,7); 
.................... 	if (input(lcd_d6)) bit_set(dado,6); 
.................... 	if (input(lcd_d5)) bit_set(dado,5); 
.................... 	if (input(lcd_d4)) bit_set(dado,4); 
.................... 	// dá um pulso na linha enable 
.................... 	output_low(lcd_enable); 
.................... 	output_high(lcd_enable); 
.................... 	// lê os quatro bits menos significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,3); 
.................... 	if (input(lcd_d6)) bit_set(dado,2); 
.................... 	if (input(lcd_d5)) bit_set(dado,1); 
.................... 	if (input(lcd_d4)) bit_set(dado,0); 
.................... 	output_low(lcd_enable);	// desabilita o display 
.................... 	return dado;	// retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
.................... 	// coloca os quatro bits nas saidas 
.................... 	output_bit(lcd_d4,bit_test(dado,0)); 
0036:  BTFSC  2E.0
0037:  GOTO   03A
0038:  BCF    08.4
0039:  GOTO   03B
003A:  BSF    08.4
003B:  BSF    03.5
003C:  BCF    08.4
.................... 	output_bit(lcd_d5,bit_test(dado,1)); 
003D:  BCF    03.5
003E:  BTFSC  2E.1
003F:  GOTO   042
0040:  BCF    08.5
0041:  GOTO   043
0042:  BSF    08.5
0043:  BSF    03.5
0044:  BCF    08.5
.................... 	output_bit(lcd_d6,bit_test(dado,2)); 
0045:  BCF    03.5
0046:  BTFSC  2E.2
0047:  GOTO   04A
0048:  BCF    08.6
0049:  GOTO   04B
004A:  BSF    08.6
004B:  BSF    03.5
004C:  BCF    08.6
.................... 	output_bit(lcd_d7,bit_test(dado,3)); 
004D:  BCF    03.5
004E:  BTFSC  2E.3
004F:  GOTO   052
0050:  BCF    08.7
0051:  GOTO   053
0052:  BSF    08.7
0053:  BSF    03.5
0054:  BCF    08.7
.................... 	// dá um pulso na linha enable 
.................... 	output_high(lcd_enable); 
0055:  BCF    09.1
0056:  BCF    03.5
0057:  BSF    09.1
.................... 	output_low(lcd_enable); 
0058:  BSF    03.5
0059:  BCF    09.1
005A:  BCF    03.5
005B:  BCF    09.1
005C:  RETURN
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
.................... 	// coloca a linha rs em 0 
.................... 	output_low(lcd_rs); 
005D:  BSF    03.5
005E:  BCF    09.2
005F:  BCF    03.5
0060:  BCF    09.2
.................... 	// aguarda o display ficar desocupado 
.................... 	//while ( bit_test(lcd_le_byte(),7) ) ; 
.................... 	// configura a linha rs dependendo do modo selecionado 
.................... 	output_bit(lcd_rs,endereco); 
0061:  MOVF   2B,F
0062:  BTFSS  03.2
0063:  GOTO   066
0064:  BCF    09.2
0065:  GOTO   067
0066:  BSF    09.2
0067:  BSF    03.5
0068:  BCF    09.2
.................... 	delay_us(100);	// aguarda 100 us 
0069:  MOVLW  A6
006A:  MOVWF  77
006B:  DECFSZ 77,F
006C:  GOTO   06B
006D:  NOP
.................... 	// caso a linha rw esteja definida, coloca em 0 
.................... 	#ifdef lcd_rw 
.................... 		output_low(lcd_rw); 
.................... 	#endif 
.................... 	// desativa linha enable 
.................... 	output_low(lcd_enable); 
006E:  BCF    09.1
006F:  BCF    03.5
0070:  BCF    09.1
.................... 	// envia a primeira parte do byte 
.................... 	lcd_envia_nibble(dado >> 4); 
0071:  SWAPF  2C,W
0072:  MOVWF  2D
0073:  MOVLW  0F
0074:  ANDWF  2D,F
0075:  MOVF   2D,W
0076:  MOVWF  2E
0077:  CALL   036
.................... 	// envia a segunda parte do byte 
.................... 	lcd_envia_nibble(dado & 0x0f); 
0078:  MOVF   2C,W
0079:  ANDLW  0F
007A:  MOVWF  2D
007B:  MOVWF  2E
007C:  CALL   036
007D:  RETURN
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicialização do display 
.................... { 
.................... 	byte conta; 
.................... 	output_low(lcd_d4); 
007E:  BSF    03.5
007F:  BCF    08.4
0080:  BCF    03.5
0081:  BCF    08.4
.................... 	output_low(lcd_d5); 
0082:  BSF    03.5
0083:  BCF    08.5
0084:  BCF    03.5
0085:  BCF    08.5
.................... 	output_low(lcd_d6); 
0086:  BSF    03.5
0087:  BCF    08.6
0088:  BCF    03.5
0089:  BCF    08.6
.................... 	output_low(lcd_d7); 
008A:  BSF    03.5
008B:  BCF    08.7
008C:  BCF    03.5
008D:  BCF    08.7
.................... 	output_low(lcd_rs); 
008E:  BSF    03.5
008F:  BCF    09.2
0090:  BCF    03.5
0091:  BCF    09.2
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
.................... 	output_low(lcd_enable); 
0092:  BSF    03.5
0093:  BCF    09.1
0094:  BCF    03.5
0095:  BCF    09.1
.................... 	delay_ms(15); 
0096:  MOVLW  0F
0097:  MOVWF  27
0098:  CALL   022
.................... 	// envia uma seqüência de 3 vezes 0x03 
.................... 	// e depois 0x02 para configurar o módulo 
.................... 	// para modo de 4 bits 
.................... 	for(conta=1;conta<=3;++conta) 
0099:  MOVLW  01
009A:  MOVWF  22
009B:  MOVF   22,W
009C:  SUBLW  03
009D:  BTFSS  03.0
009E:  GOTO   0A7
.................... 	{ 
.................... 		lcd_envia_nibble(3); 
009F:  MOVLW  03
00A0:  MOVWF  2E
00A1:  CALL   036
.................... 		delay_ms(5); 
00A2:  MOVLW  05
00A3:  MOVWF  27
00A4:  CALL   022
00A5:  INCF   22,F
00A6:  GOTO   09B
.................... 	} 
.................... 	lcd_envia_nibble(2); 
00A7:  MOVLW  02
00A8:  MOVWF  2E
00A9:  CALL   036
.................... 	// envia string de inicialização do display 
.................... 	for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
00AA:  CLRF   22
00AB:  MOVF   22,W
00AC:  SUBLW  03
00AD:  BTFSS  03.0
00AE:  GOTO   0B8
00AF:  MOVF   22,W
00B0:  CALL   004
00B1:  MOVWF  23
00B2:  CLRF   2B
00B3:  MOVF   23,W
00B4:  MOVWF  2C
00B5:  CALL   05D
00B6:  INCF   22,F
00B7:  GOTO   0AB
00B8:  BCF    0A.3
00B9:  BCF    0A.4
00BA:  GOTO   2DE (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
00D5:  DECFSZ 28,W
00D6:  GOTO   0D8
00D7:  GOTO   0DB
....................    	endereco = lcd_seg_lin; 
00D8:  MOVLW  40
00D9:  MOVWF  29
00DA:  GOTO   0DC
....................    else 
....................    	endereco = 0; 
00DB:  CLRF   29
....................    endereco += x-1; 
00DC:  MOVLW  01
00DD:  SUBWF  27,W
00DE:  ADDWF  29,F
....................    lcd_envia_byte(0,0x80|endereco); 
00DF:  MOVF   29,W
00E0:  IORLW  80
00E1:  MOVWF  2A
00E2:  CLRF   2B
00E3:  MOVF   2A,W
00E4:  MOVWF  2C
00E5:  CALL   05D
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
*
00BB:  MOVF   26,W
00BC:  XORLW  0C
00BD:  BTFSC  03.2
00BE:  GOTO   0C9
00BF:  XORLW  06
00C0:  BTFSC  03.2
00C1:  GOTO   0D1
00C2:  XORLW  07
00C3:  BTFSC  03.2
00C4:  GOTO   0D1
00C5:  XORLW  05
00C6:  BTFSC  03.2
00C7:  GOTO   0E7
00C8:  GOTO   0EC
.................... 	{ 
....................      case '\f' 	:	lcd_envia_byte(0,1); 
00C9:  CLRF   2B
00CA:  MOVLW  01
00CB:  MOVWF  2C
00CC:  CALL   05D
.................... 	  			delay_ms(2); 
00CD:  MOVLW  02
00CE:  MOVWF  27
00CF:  CALL   022
.................... 				break; 
00D0:  GOTO   0F1
....................      case '\n'	: 
.................... 	  case '\r' 	:	lcd_pos_xy(1,2); 
00D1:  MOVLW  01
00D2:  MOVWF  27
00D3:  MOVLW  02
00D4:  MOVWF  28
.................... 	  			break; 
*
00E6:  GOTO   0F1
....................      case '\b' 	:	lcd_envia_byte(0,0x10); 
00E7:  CLRF   2B
00E8:  MOVLW  10
00E9:  MOVWF  2C
00EA:  CALL   05D
.................... 	  			break; 
00EB:  GOTO   0F1
....................      default	:	lcd_envia_byte(1,c); 
00EC:  MOVLW  01
00ED:  MOVWF  2B
00EE:  MOVF   26,W
00EF:  MOVWF  2C
00F0:  CALL   05D
.................... 	  			break; 
....................    } 
00F1:  RETURN
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
.................... 	char valor; 
.................... 	// seleciona a posição do caractere 
.................... 	lcd_pos_xy(x,y); 
.................... 	// ativa rs 
.................... 	output_high(lcd_rs); 
.................... 	// lê o caractere 
.................... 	valor = lcd_le_byte(); 
.................... 	// desativa rs 
.................... 	output_low(lcd_rs); 
.................... 	// retorna o valor do caractere 
.................... 	return valor; 
.................... } 
....................  
.................... #include "myKeypad.c" 
.................... /*######################################################################  
....................  Rotina utilizaçãoo do teclado da placa PicSim board4 
....................  Adaptada para o compilador CCS 
....................  Autor: Alberto Willia Mascarenhas (adaptou para o compilador) 
....................  For e-mail suggestions : awmascarenhas@gmail.com 
.................... ######################################################################## */ 
....................  
.................... //Alterei os pinos das colunas para poder utilizar interrupcao pelo B0 
....................  
.................... //Keypad connection: 
.................... #define row0 PIN_B4 
.................... #define row1 PIN_B5 
.................... #define row2 PIN_B6 
.................... #define row3 PIN_B7 
.................... #define col0 PIN_B0 
.................... #define col1 PIN_B1 
.................... #define col2 PIN_B2 
.................... #define col3 PIN_B3 
....................  
....................  
.................... unsigned char tc_tecla(unsigned int timeout) 
*
0148:  CLRF   23
0149:  CLRF   24
.................... { 
....................     unsigned int to=0; 
....................     unsigned char k = 0;  
....................     while(((to < timeout)||(!timeout))&&(!k)){ 
014A:  MOVF   22,W
014B:  SUBWF  23,W
014C:  BTFSS  03.0
014D:  GOTO   151
014E:  MOVF   22,F
014F:  BTFSS  03.2
0150:  GOTO   266
0151:  MOVF   24,F
0152:  BTFSS  03.2
0153:  GOTO   266
....................        //------------------------------------------------------------------------- 
....................        //inicio do programa de varredura do teclado matricial 
....................        //-------------------------------------------------------------------------- 
....................        //habilita primeira coluna do teclado 
....................        output_low(col0);output_high(col1);output_high(col2);output_high(col3); 
0154:  BSF    03.5
0155:  BCF    06.0
0156:  BCF    03.5
0157:  BCF    06.0
0158:  BSF    03.5
0159:  BCF    06.1
015A:  BCF    03.5
015B:  BSF    06.1
015C:  BSF    03.5
015D:  BCF    06.2
015E:  BCF    03.5
015F:  BSF    06.2
0160:  BSF    03.5
0161:  BCF    06.3
0162:  BCF    03.5
0163:  BSF    06.3
....................        delay_ms(5); 
0164:  MOVLW  05
0165:  MOVWF  27
0166:  CALL   022
....................         
....................        //So sai do while quando o usuario soltar o dedo do teclado 
....................        if (input(row0) == 0){while(input(row0) == 0);k='1';}; 
0167:  BSF    03.5
0168:  BSF    06.4
0169:  BCF    03.5
016A:  BTFSC  06.4
016B:  GOTO   173
016C:  BSF    03.5
016D:  BSF    06.4
016E:  BCF    03.5
016F:  BTFSS  06.4
0170:  GOTO   16C
0171:  MOVLW  31
0172:  MOVWF  24
....................        if (input(row1) == 0){while(input(row1) == 0);k='4';}; 
0173:  BSF    03.5
0174:  BSF    06.5
0175:  BCF    03.5
0176:  BTFSC  06.5
0177:  GOTO   17F
0178:  BSF    03.5
0179:  BSF    06.5
017A:  BCF    03.5
017B:  BTFSS  06.5
017C:  GOTO   178
017D:  MOVLW  34
017E:  MOVWF  24
....................        if (input(row2) == 0){while(input(row2) == 0);k='7';}; 
017F:  BSF    03.5
0180:  BSF    06.6
0181:  BCF    03.5
0182:  BTFSC  06.6
0183:  GOTO   18B
0184:  BSF    03.5
0185:  BSF    06.6
0186:  BCF    03.5
0187:  BTFSS  06.6
0188:  GOTO   184
0189:  MOVLW  37
018A:  MOVWF  24
....................        if (input(row3) == 0){while(input(row3) == 0);k='*';}; 
018B:  BSF    03.5
018C:  BSF    06.7
018D:  BCF    03.5
018E:  BTFSC  06.7
018F:  GOTO   197
0190:  BSF    03.5
0191:  BSF    06.7
0192:  BCF    03.5
0193:  BTFSS  06.7
0194:  GOTO   190
0195:  MOVLW  2A
0196:  MOVWF  24
....................        //habilita segunda coluna do teclado 
....................        output_high(col0);output_low(col1);output_high(col2);output_high(col3); 
0197:  BSF    03.5
0198:  BCF    06.0
0199:  BCF    03.5
019A:  BSF    06.0
019B:  BSF    03.5
019C:  BCF    06.1
019D:  BCF    03.5
019E:  BCF    06.1
019F:  BSF    03.5
01A0:  BCF    06.2
01A1:  BCF    03.5
01A2:  BSF    06.2
01A3:  BSF    03.5
01A4:  BCF    06.3
01A5:  BCF    03.5
01A6:  BSF    06.3
....................        delay_ms(5);  
01A7:  MOVLW  05
01A8:  MOVWF  27
01A9:  CALL   022
....................        if (input(row0) == 0){while(input(row0) == 0);k='2';}; 
01AA:  BSF    03.5
01AB:  BSF    06.4
01AC:  BCF    03.5
01AD:  BTFSC  06.4
01AE:  GOTO   1B6
01AF:  BSF    03.5
01B0:  BSF    06.4
01B1:  BCF    03.5
01B2:  BTFSS  06.4
01B3:  GOTO   1AF
01B4:  MOVLW  32
01B5:  MOVWF  24
....................        if (input(row1) == 0){while(input(row1) == 0);k='5';}; 
01B6:  BSF    03.5
01B7:  BSF    06.5
01B8:  BCF    03.5
01B9:  BTFSC  06.5
01BA:  GOTO   1C2
01BB:  BSF    03.5
01BC:  BSF    06.5
01BD:  BCF    03.5
01BE:  BTFSS  06.5
01BF:  GOTO   1BB
01C0:  MOVLW  35
01C1:  MOVWF  24
....................        if (input(row2) == 0){while(input(row2) == 0);k='8';}; 
01C2:  BSF    03.5
01C3:  BSF    06.6
01C4:  BCF    03.5
01C5:  BTFSC  06.6
01C6:  GOTO   1CE
01C7:  BSF    03.5
01C8:  BSF    06.6
01C9:  BCF    03.5
01CA:  BTFSS  06.6
01CB:  GOTO   1C7
01CC:  MOVLW  38
01CD:  MOVWF  24
....................        if (input(row3) == 0){while(input(row3) == 0);k='0';}; 
01CE:  BSF    03.5
01CF:  BSF    06.7
01D0:  BCF    03.5
01D1:  BTFSC  06.7
01D2:  GOTO   1DA
01D3:  BSF    03.5
01D4:  BSF    06.7
01D5:  BCF    03.5
01D6:  BTFSS  06.7
01D7:  GOTO   1D3
01D8:  MOVLW  30
01D9:  MOVWF  24
....................         
....................        //habilita terceira coluna do teclado 
....................        output_high(col0);output_high(col1);output_low(col2);output_high(col3); 
01DA:  BSF    03.5
01DB:  BCF    06.0
01DC:  BCF    03.5
01DD:  BSF    06.0
01DE:  BSF    03.5
01DF:  BCF    06.1
01E0:  BCF    03.5
01E1:  BSF    06.1
01E2:  BSF    03.5
01E3:  BCF    06.2
01E4:  BCF    03.5
01E5:  BCF    06.2
01E6:  BSF    03.5
01E7:  BCF    06.3
01E8:  BCF    03.5
01E9:  BSF    06.3
....................        delay_ms(5);  
01EA:  MOVLW  05
01EB:  MOVWF  27
01EC:  CALL   022
....................        if (input(row0) == 0){while(input(row0) == 0);k='3';}; 
01ED:  BSF    03.5
01EE:  BSF    06.4
01EF:  BCF    03.5
01F0:  BTFSC  06.4
01F1:  GOTO   1F9
01F2:  BSF    03.5
01F3:  BSF    06.4
01F4:  BCF    03.5
01F5:  BTFSS  06.4
01F6:  GOTO   1F2
01F7:  MOVLW  33
01F8:  MOVWF  24
....................        if (input(row1) == 0){while(input(row1) == 0);k='6';}; 
01F9:  BSF    03.5
01FA:  BSF    06.5
01FB:  BCF    03.5
01FC:  BTFSC  06.5
01FD:  GOTO   205
01FE:  BSF    03.5
01FF:  BSF    06.5
0200:  BCF    03.5
0201:  BTFSS  06.5
0202:  GOTO   1FE
0203:  MOVLW  36
0204:  MOVWF  24
....................        if (input(row2) == 0){while(input(row2) == 0);k='9';}; 
0205:  BSF    03.5
0206:  BSF    06.6
0207:  BCF    03.5
0208:  BTFSC  06.6
0209:  GOTO   211
020A:  BSF    03.5
020B:  BSF    06.6
020C:  BCF    03.5
020D:  BTFSS  06.6
020E:  GOTO   20A
020F:  MOVLW  39
0210:  MOVWF  24
....................        if (input(row3) == 0){while(input(row3) == 0);k='#';}; 
0211:  BSF    03.5
0212:  BSF    06.7
0213:  BCF    03.5
0214:  BTFSC  06.7
0215:  GOTO   21D
0216:  BSF    03.5
0217:  BSF    06.7
0218:  BCF    03.5
0219:  BTFSS  06.7
021A:  GOTO   216
021B:  MOVLW  23
021C:  MOVWF  24
....................         
....................        //habilita quarta coluna do teclado 
....................        output_high(col0);output_high(col1);output_high(col2);output_low(col3); 
021D:  BSF    03.5
021E:  BCF    06.0
021F:  BCF    03.5
0220:  BSF    06.0
0221:  BSF    03.5
0222:  BCF    06.1
0223:  BCF    03.5
0224:  BSF    06.1
0225:  BSF    03.5
0226:  BCF    06.2
0227:  BCF    03.5
0228:  BSF    06.2
0229:  BSF    03.5
022A:  BCF    06.3
022B:  BCF    03.5
022C:  BCF    06.3
....................        delay_ms(5);  
022D:  MOVLW  05
022E:  MOVWF  27
022F:  CALL   022
....................        if (input(row0) == 0){while(input(row0) == 0);k='A';}; 
0230:  BSF    03.5
0231:  BSF    06.4
0232:  BCF    03.5
0233:  BTFSC  06.4
0234:  GOTO   23C
0235:  BSF    03.5
0236:  BSF    06.4
0237:  BCF    03.5
0238:  BTFSS  06.4
0239:  GOTO   235
023A:  MOVLW  41
023B:  MOVWF  24
....................        if (input(row1) == 0){while(input(row1) == 0);k='B';}; 
023C:  BSF    03.5
023D:  BSF    06.5
023E:  BCF    03.5
023F:  BTFSC  06.5
0240:  GOTO   248
0241:  BSF    03.5
0242:  BSF    06.5
0243:  BCF    03.5
0244:  BTFSS  06.5
0245:  GOTO   241
0246:  MOVLW  42
0247:  MOVWF  24
....................        if (input(row2) == 0){while(input(row2) == 0);k='C';}; 
0248:  BSF    03.5
0249:  BSF    06.6
024A:  BCF    03.5
024B:  BTFSC  06.6
024C:  GOTO   254
024D:  BSF    03.5
024E:  BSF    06.6
024F:  BCF    03.5
0250:  BTFSS  06.6
0251:  GOTO   24D
0252:  MOVLW  43
0253:  MOVWF  24
....................        if (input(row3) == 0){while(input(row3) == 0);k='D';}; 
0254:  BSF    03.5
0255:  BSF    06.7
0256:  BCF    03.5
0257:  BTFSC  06.7
0258:  GOTO   260
0259:  BSF    03.5
025A:  BSF    06.7
025B:  BCF    03.5
025C:  BTFSS  06.7
025D:  GOTO   259
025E:  MOVLW  44
025F:  MOVWF  24
....................         
....................        delay_ms(1); 
0260:  MOVLW  01
0261:  MOVWF  27
0262:  CALL   022
....................        to+=5; 
0263:  MOVLW  05
0264:  ADDWF  23,F
0265:  GOTO   14A
....................     } 
....................     if(!k)k=255; 
0266:  MOVF   24,F
0267:  BTFSS  03.2
0268:  GOTO   26B
0269:  MOVLW  FF
026A:  MOVWF  24
....................     return k;  
026B:  MOVF   24,W
026C:  MOVWF  78
026D:  BCF    0A.3
026E:  BCF    0A.4
026F:  GOTO   306 (RETURN)
.................... } 
....................  
....................  
.................... void main() 
*
02C9:  MOVF   03,W
02CA:  ANDLW  1F
02CB:  MOVWF  03
02CC:  MOVLW  FF
02CD:  MOVWF  20
02CE:  BSF    03.5
02CF:  BSF    1F.0
02D0:  BSF    1F.1
02D1:  BSF    1F.2
02D2:  BCF    1F.3
02D3:  MOVLW  07
02D4:  MOVWF  1C
02D5:  BCF    03.7
.................... { 
....................    set_tris_b(0xF0); 
02D6:  MOVLW  F0
02D7:  MOVWF  06
....................    //output_b(0xF0); 
....................    port_b_pullups(true); 
02D8:  BCF    01.7
....................     
....................    unsigned char tmp; 
....................    delay_ms(100); 
02D9:  MOVLW  64
02DA:  BCF    03.5
02DB:  MOVWF  27
02DC:  CALL   022
....................    lcd_ini(); 
02DD:  GOTO   07E
....................    delay_ms(100); 
02DE:  MOVLW  64
02DF:  MOVWF  27
02E0:  CALL   022
....................     
....................    printf(lcd_escreve, "\fIFMT 2022"); 
02E1:  MOVLW  0C
02E2:  BSF    03.6
02E3:  MOVWF  0D
02E4:  MOVLW  00
02E5:  MOVWF  0F
02E6:  BCF    03.6
02E7:  CALL   0F2
....................    delay_ms(1000); 
02E8:  MOVLW  04
02E9:  MOVWF  22
02EA:  MOVLW  FA
02EB:  MOVWF  27
02EC:  CALL   022
02ED:  DECFSZ 22,F
02EE:  GOTO   2EA
....................    printf(lcd_escreve, "\f     TECLADO     "); 
02EF:  MOVLW  12
02F0:  BSF    03.6
02F1:  MOVWF  0D
02F2:  MOVLW  00
02F3:  MOVWF  0F
02F4:  BCF    03.6
02F5:  CALL   0F2
....................    delay_ms(2000); 
02F6:  MOVLW  08
02F7:  MOVWF  22
02F8:  MOVLW  FA
02F9:  MOVWF  27
02FA:  CALL   022
02FB:  DECFSZ 22,F
02FC:  GOTO   2F8
....................     
....................    output_high(PIN_C4); 
02FD:  BCF    20.4
02FE:  MOVF   20,W
02FF:  BSF    03.5
0300:  MOVWF  07
0301:  BCF    03.5
0302:  BSF    07.4
....................   
....................     
....................    while(TRUE) 
....................    { 
....................       tmp = tc_tecla(20); 
0303:  MOVLW  14
0304:  MOVWF  22
0305:  GOTO   148
0306:  MOVF   78,W
0307:  MOVWF  21
....................        
....................       if(tmp != 255){ 
0308:  INCFSZ 21,W
0309:  GOTO   30B
030A:  GOTO   318
....................          printf(lcd_escreve, "\fButton %c", tmp); 
030B:  MOVLW  1C
030C:  BSF    03.6
030D:  MOVWF  0D
030E:  MOVLW  00
030F:  MOVWF  0F
0310:  BCF    03.0
0311:  MOVLW  08
0312:  BCF    03.6
0313:  MOVWF  22
0314:  GOTO   270
0315:  MOVF   21,W
0316:  MOVWF  26
0317:  CALL   0BB
....................       } 
....................       delay_ms(30); 
0318:  MOVLW  1E
0319:  MOVWF  27
031A:  CALL   022
031B:  GOTO   303
....................    } 
.................... } 
031C:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
