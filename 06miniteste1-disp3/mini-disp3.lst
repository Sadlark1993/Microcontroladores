CCS PCM C Compiler, Version 5.108Pd, 1               01-set-22 20:27
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\Sadla\OneDrive\Documentos\MEGAsync\doc\Facul\Microcontroladores\Projetos\06miniteste1-disp3\mini-disp3.lst

               ROM used:   156 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           7 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   01A
0003:  NOP
.................... //Autor: Claudio Zimmermann Junior
.................... /*
....................    Faca a leitura analogica do pino A0 configurado em 8 bits.
.................... O dispositivo deve apresentar 7 niveis de alerta atraves do dispositivo de
.................... 3 segmentos. Tabela:
.................... 
.................... Nivel    intervalo     valor no dispositivo
.................... N1:      127<=x<143     1
.................... N2:      143<=x<159     6
.................... N3:      159<=x<175     2
.................... N4:      175<=x<191     5
.................... N5:      191<=x<207     3
.................... N6:      207<=x<223     4
.................... N7:      223<=X<239     7
.................... 
.................... pinos:a = PIN_B2;
....................       b = PIN_B1;
....................       c = PIN_B0;
.................... */
.................... //#include <mini-disp3.h>
.................... 
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
.................... 
.................... #list
.................... 
.................... #device ADC=8
.................... #use delay(crystal=20000000)
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  BCF    0A.3
0018:  BCF    0A.4
0019:  GOTO   03A (RETURN)
.................... 
.................... void main()
001A:  MOVF   03,W
001B:  ANDLW  1F
001C:  MOVWF  03
001D:  BSF    03.5
001E:  BSF    1F.0
001F:  BSF    1F.1
0020:  BSF    1F.2
0021:  BCF    1F.3
0022:  MOVLW  07
0023:  MOVWF  1C
0024:  BCF    03.7
.................... {
....................    setup_adc_ports(AN0);
0025:  BCF    1F.0
0026:  BSF    1F.1
0027:  BSF    1F.2
0028:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_64);
0029:  BSF    1F.6
002A:  BCF    03.5
002B:  BCF    1F.6
002C:  BSF    1F.7
002D:  BSF    03.5
002E:  BCF    1F.7
002F:  BCF    03.5
0030:  BSF    1F.0
....................    
....................    unsigned int valorAn;
....................    set_adc_channel(0);
0031:  MOVLW  00
0032:  MOVWF  78
0033:  MOVF   1F,W
0034:  ANDLW  C7
0035:  IORWF  78,W
0036:  MOVWF  1F
....................    delay_ms(1);
0037:  MOVLW  01
0038:  MOVWF  22
0039:  GOTO   004
....................    output_low(PIN_A5); //Desligar display 7 seg.
003A:  BSF    03.5
003B:  BCF    05.5
003C:  BCF    03.5
003D:  BCF    05.5
....................    output_b(0); //Iniciar com todos os leds B desligados.
003E:  BSF    03.5
003F:  CLRF   06
0040:  BCF    03.5
0041:  CLRF   06
.................... 
....................    while(TRUE)
....................    {
....................       valorAn = read_adc();
0042:  BSF    1F.2
0043:  BTFSC  1F.2
0044:  GOTO   043
0045:  MOVF   1E,W
0046:  MOVWF  21
....................       output_d(valorAn); //imprime o valor lido na porta D
0047:  BSF    03.5
0048:  CLRF   08
0049:  BCF    03.5
004A:  MOVF   21,W
004B:  MOVWF  08
....................       /*
....................       a = PIN_B2;
....................       b = PIN_B1;
....................       c = PIN_B0;
....................       */
....................       if(valorAn>= 127 && valorAn < 239){
004C:  MOVF   21,W
004D:  SUBLW  7E
004E:  BTFSC  03.0
004F:  GOTO   096
0050:  MOVF   21,W
0051:  SUBLW  EE
0052:  BTFSS  03.0
0053:  GOTO   096
....................          if(valorAn<143) output_b(1);
0054:  MOVF   21,W
0055:  SUBLW  8E
0056:  BTFSS  03.0
0057:  GOTO   05E
0058:  BSF    03.5
0059:  CLRF   06
005A:  MOVLW  01
005B:  BCF    03.5
005C:  MOVWF  06
005D:  GOTO   095
....................          else if(valorAn<159) output_b(6);
005E:  MOVF   21,W
005F:  SUBLW  9E
0060:  BTFSS  03.0
0061:  GOTO   068
0062:  BSF    03.5
0063:  CLRF   06
0064:  MOVLW  06
0065:  BCF    03.5
0066:  MOVWF  06
0067:  GOTO   095
....................          else if(valorAn<175) output_b(2);
0068:  MOVF   21,W
0069:  SUBLW  AE
006A:  BTFSS  03.0
006B:  GOTO   072
006C:  BSF    03.5
006D:  CLRF   06
006E:  MOVLW  02
006F:  BCF    03.5
0070:  MOVWF  06
0071:  GOTO   095
....................          else if(valorAn<191) output_b(5);
0072:  MOVF   21,W
0073:  SUBLW  BE
0074:  BTFSS  03.0
0075:  GOTO   07C
0076:  BSF    03.5
0077:  CLRF   06
0078:  MOVLW  05
0079:  BCF    03.5
007A:  MOVWF  06
007B:  GOTO   095
....................          else if(valorAn<207) output_b(3);
007C:  MOVF   21,W
007D:  SUBLW  CE
007E:  BTFSS  03.0
007F:  GOTO   086
0080:  BSF    03.5
0081:  CLRF   06
0082:  MOVLW  03
0083:  BCF    03.5
0084:  MOVWF  06
0085:  GOTO   095
....................          else if(valorAn<223) output_b(4);
0086:  MOVF   21,W
0087:  SUBLW  DE
0088:  BTFSS  03.0
0089:  GOTO   090
008A:  BSF    03.5
008B:  CLRF   06
008C:  MOVLW  04
008D:  BCF    03.5
008E:  MOVWF  06
008F:  GOTO   095
....................          else output_b(7);       
0090:  BSF    03.5
0091:  CLRF   06
0092:  MOVLW  07
0093:  BCF    03.5
0094:  MOVWF  06
....................       }else{
0095:  GOTO   09A
....................          output_b(0);
0096:  BSF    03.5
0097:  CLRF   06
0098:  BCF    03.5
0099:  CLRF   06
....................       }
009A:  GOTO   042
....................    }
.................... 
.................... }
009B:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
