CCS PCM C Compiler, Version 5.015, 5967               01-out-22 16:37

               Filename:   C:\Users\Sadla\OneDrive\Documentos\MEGAsync\doc\Facul\Microcontroladores\Projetos\testeRE1\main.lst

               ROM used:   39 words (0%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           6 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... //#include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
....................  
.................... /* 
....................  
.................... #INT_RB 
.................... void  RB_isr(void)  
.................... { 
....................    //clear_interrupt(INT_RB); 
....................    output_toggle(PIN_C5); 
.................... } 
.................... */ 
....................  
.................... void main() 
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  MOVLW  FF
0008:  MOVWF  20
0009:  BSF    03.5
000A:  BSF    1F.0
000B:  BSF    1F.1
000C:  BSF    1F.2
000D:  BCF    1F.3
000E:  MOVLW  07
000F:  MOVWF  1C
0010:  BCF    03.7
.................... { 
....................    //setting all of B ports to input 
....................    set_tris_b(0xFF);//its 1 byte. bit 1 means input, bit 0 means output. 
0011:  MOVLW  FF
0012:  MOVWF  06
....................    /* 
....................    output_c(0); 
....................    clear_interrupt(INT_RB); 
....................    enable_interrupts(INT_RB); 
....................    enable_interrupts(GLOBAL); 
.................... */ 
....................    while(TRUE){ 
....................       if(input(PIN_B5)){ 
0013:  BSF    06.5
0014:  BCF    03.5
0015:  BTFSS  06.5
0016:  GOTO   01E
....................          output_high(PIN_C4); 
0017:  BCF    20.4
0018:  MOVF   20,W
0019:  BSF    03.5
001A:  MOVWF  07
001B:  BCF    03.5
001C:  BSF    07.4
....................       }else{ 
001D:  GOTO   024
....................          output_low(PIN_C4); 
001E:  BCF    20.4
001F:  MOVF   20,W
0020:  BSF    03.5
0021:  MOVWF  07
0022:  BCF    03.5
0023:  BCF    07.4
....................       } 
0024:  BSF    03.5
0025:  GOTO   013
....................    } 
....................  
.................... } 
0026:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
